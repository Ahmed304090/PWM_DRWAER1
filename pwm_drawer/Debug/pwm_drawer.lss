
pwm_drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002630  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002630  000026a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002814  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c39  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2a  00000000  00000000  00006629  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019a4  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f4  00000000  00000000  000089f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000907  00000000  00000000  00008dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a49  00000000  00000000  000096f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	82 0c       	add	r8, r2
      56:	c3 0c       	add	r12, r3
      58:	c3 0c       	add	r12, r3
      5a:	c3 0c       	add	r12, r3
      5c:	c3 0c       	add	r12, r3
      5e:	c3 0c       	add	r12, r3
      60:	c3 0c       	add	r12, r3
      62:	c3 0c       	add	r12, r3
      64:	c3 0c       	add	r12, r3
      66:	c3 0c       	add	r12, r3
      68:	41 0c       	add	r4, r1
      6a:	c3 0c       	add	r12, r3
      6c:	c3 0c       	add	r12, r3
      6e:	c3 0c       	add	r12, r3
      70:	c3 0c       	add	r12, r3
      72:	c3 0c       	add	r12, r3
      74:	c3 0c       	add	r12, r3
      76:	c3 0c       	add	r12, r3
      78:	c3 0c       	add	r12, r3
      7a:	c3 0c       	add	r12, r3
      7c:	00 0c       	add	r0, r0
      7e:	c3 0c       	add	r12, r3
      80:	c3 0c       	add	r12, r3
      82:	c3 0c       	add	r12, r3
      84:	c3 0c       	add	r12, r3
      86:	bf 0b       	sbc	r27, r31
      88:	c3 0c       	add	r12, r3
      8a:	c3 0c       	add	r12, r3
      8c:	c3 0c       	add	r12, r3
      8e:	c3 0c       	add	r12, r3
      90:	7e 0b       	sbc	r23, r30
      92:	c3 0c       	add	r12, r3
      94:	c3 0c       	add	r12, r3
      96:	c3 0c       	add	r12, r3
      98:	c3 0c       	add	r12, r3
      9a:	c3 0c       	add	r12, r3
      9c:	c3 0c       	add	r12, r3
      9e:	c3 0c       	add	r12, r3
      a0:	c3 0c       	add	r12, r3
      a2:	c3 0c       	add	r12, r3
      a4:	3d 0b       	sbc	r19, r29
      a6:	c3 0c       	add	r12, r3
      a8:	c3 0c       	add	r12, r3
      aa:	c3 0c       	add	r12, r3
      ac:	c3 0c       	add	r12, r3
      ae:	c3 0c       	add	r12, r3
      b0:	c3 0c       	add	r12, r3
      b2:	c3 0c       	add	r12, r3
      b4:	c3 0c       	add	r12, r3
      b6:	c3 0c       	add	r12, r3
      b8:	fc 0a       	sbc	r15, r28
      ba:	c3 0c       	add	r12, r3
      bc:	c3 0c       	add	r12, r3
      be:	c3 0c       	add	r12, r3
      c0:	c3 0c       	add	r12, r3
      c2:	c3 0c       	add	r12, r3
      c4:	c3 0c       	add	r12, r3
      c6:	c3 0c       	add	r12, r3
      c8:	c3 0c       	add	r12, r3
      ca:	c3 0c       	add	r12, r3
      cc:	bb 0a       	sbc	r11, r27
      ce:	c3 0c       	add	r12, r3
      d0:	c3 0c       	add	r12, r3
      d2:	c3 0c       	add	r12, r3
      d4:	c3 0c       	add	r12, r3
      d6:	c3 0c       	add	r12, r3
      d8:	c3 0c       	add	r12, r3
      da:	c3 0c       	add	r12, r3
      dc:	c3 0c       	add	r12, r3
      de:	c3 0c       	add	r12, r3
      e0:	7a 0a       	sbc	r7, r26
      e2:	c3 0c       	add	r12, r3
      e4:	c3 0c       	add	r12, r3
      e6:	c3 0c       	add	r12, r3
      e8:	c3 0c       	add	r12, r3
      ea:	39 0a       	sbc	r3, r25
      ec:	c3 0c       	add	r12, r3
      ee:	c3 0c       	add	r12, r3
      f0:	c3 0c       	add	r12, r3
      f2:	c3 0c       	add	r12, r3
      f4:	f8 09       	sbc	r31, r8
      f6:	c3 0c       	add	r12, r3
      f8:	c3 0c       	add	r12, r3
      fa:	c3 0c       	add	r12, r3
      fc:	c3 0c       	add	r12, r3
      fe:	c3 0c       	add	r12, r3
     100:	c3 0c       	add	r12, r3
     102:	c3 0c       	add	r12, r3
     104:	c3 0c       	add	r12, r3
     106:	c3 0c       	add	r12, r3
     108:	b7 09       	sbc	r27, r7
     10a:	c3 0c       	add	r12, r3
     10c:	c3 0c       	add	r12, r3
     10e:	c3 0c       	add	r12, r3
     110:	c3 0c       	add	r12, r3
     112:	c3 0c       	add	r12, r3
     114:	c3 0c       	add	r12, r3
     116:	c3 0c       	add	r12, r3
     118:	c3 0c       	add	r12, r3
     11a:	c3 0c       	add	r12, r3
     11c:	76 09       	sbc	r23, r6

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf e5       	ldi	r28, 0x5F	; 95
     124:	d8 e0       	ldi	r29, 0x08	; 8
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e6       	ldi	r26, 0x60	; 96
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e0 e3       	ldi	r30, 0x30	; 48
     132:	f6 e2       	ldi	r31, 0x26	; 38
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a4 37       	cpi	r26, 0x74	; 116
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>
     140:	0e 94 c9 0c 	call	0x1992	; 0x1992 <main>
     144:	0c 94 16 13 	jmp	0x262c	; 0x262c <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <LCD_voidSendCommand>:
}
void LCD_voidShift(u8 copy_u8ShifttingDirection) {
	if (copy_u8ShifttingDirection == 0) {
		LCD_voidSendCommand(LCD_CMD_CURSOR_SHIFT_LEFT);
		} else {
		LCD_voidSendCommand(LCD_CMD_CURSOR_SHIFT_RIGHT);
     14c:	88 bb       	out	0x18, r24	; 24
     14e:	85 b3       	in	r24, 0x15	; 21
     150:	8e 7f       	andi	r24, 0xFE	; 254
     152:	85 bb       	out	0x15, r24	; 21
     154:	85 b3       	in	r24, 0x15	; 21
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	85 bb       	out	0x15, r24	; 21
     15a:	85 b3       	in	r24, 0x15	; 21
     15c:	84 60       	ori	r24, 0x04	; 4
     15e:	85 bb       	out	0x15, r24	; 21
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <LCD_voidSendCommand+0x16>
     166:	00 00       	nop
     168:	85 b3       	in	r24, 0x15	; 21
     16a:	8b 7f       	andi	r24, 0xFB	; 251
     16c:	85 bb       	out	0x15, r24	; 21
     16e:	8f e3       	ldi	r24, 0x3F	; 63
     170:	9f e1       	ldi	r25, 0x1F	; 31
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <LCD_voidSendCommand+0x26>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_voidSendCommand+0x2c>
     178:	00 00       	nop
     17a:	08 95       	ret

0000017c <LCD_voidDisplayChar>:
     17c:	88 bb       	out	0x18, r24	; 24
     17e:	85 b3       	in	r24, 0x15	; 21
     180:	81 60       	ori	r24, 0x01	; 1
     182:	85 bb       	out	0x15, r24	; 21
     184:	85 b3       	in	r24, 0x15	; 21
     186:	8d 7f       	andi	r24, 0xFD	; 253
     188:	85 bb       	out	0x15, r24	; 21
     18a:	85 b3       	in	r24, 0x15	; 21
     18c:	84 60       	ori	r24, 0x04	; 4
     18e:	85 bb       	out	0x15, r24	; 21
     190:	85 e0       	ldi	r24, 0x05	; 5
     192:	8a 95       	dec	r24
     194:	f1 f7       	brne	.-4      	; 0x192 <LCD_voidDisplayChar+0x16>
     196:	00 00       	nop
     198:	85 b3       	in	r24, 0x15	; 21
     19a:	8b 7f       	andi	r24, 0xFB	; 251
     19c:	85 bb       	out	0x15, r24	; 21
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_voidDisplayChar+0x26>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_voidDisplayChar+0x2c>
     1a8:	00 00       	nop
     1aa:	08 95       	ret

000001ac <LCD_voidInit>:
     1ac:	8f ef       	ldi	r24, 0xFF	; 255
     1ae:	87 bb       	out	0x17, r24	; 23
     1b0:	84 b3       	in	r24, 0x14	; 20
     1b2:	81 60       	ori	r24, 0x01	; 1
     1b4:	84 bb       	out	0x14, r24	; 20
     1b6:	84 b3       	in	r24, 0x14	; 20
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	84 bb       	out	0x14, r24	; 20
     1bc:	84 b3       	in	r24, 0x14	; 20
     1be:	84 60       	ori	r24, 0x04	; 4
     1c0:	84 bb       	out	0x14, r24	; 20
     1c2:	2f ef       	ldi	r18, 0xFF	; 255
     1c4:	89 ef       	ldi	r24, 0xF9	; 249
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	80 40       	sbci	r24, 0x00	; 0
     1cc:	90 40       	sbci	r25, 0x00	; 0
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <LCD_voidInit+0x1c>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_voidInit+0x26>
     1d2:	00 00       	nop
     1d4:	88 e3       	ldi	r24, 0x38	; 56
     1d6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     1da:	8f e0       	ldi	r24, 0x0F	; 15
     1dc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     1e6:	8f e3       	ldi	r24, 0x3F	; 63
     1e8:	9f e1       	ldi	r25, 0x1F	; 31
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_voidInit+0x3e>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_voidInit+0x44>
     1f0:	00 00       	nop
     1f2:	86 e0       	ldi	r24, 0x06	; 6
     1f4:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     1f8:	08 95       	ret

000001fa <LCD_voidClear>:
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     200:	8f e3       	ldi	r24, 0x3F	; 63
     202:	9f e1       	ldi	r25, 0x1F	; 31
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <LCD_voidClear+0xa>
     208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_voidClear+0x10>
     20a:	00 00       	nop
     20c:	08 95       	ret

0000020e <LCD_voidDisplayString>:
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
     214:	03 c0       	rjmp	.+6      	; 0x21c <LCD_voidDisplayString+0xe>
     216:	21 96       	adiw	r28, 0x01	; 1
     218:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_voidDisplayChar>
     21c:	88 81       	ld	r24, Y
     21e:	81 11       	cpse	r24, r1
     220:	fa cf       	rjmp	.-12     	; 0x216 <LCD_voidDisplayString+0x8>
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <LCD_voidDisplayNumber>:
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	2b 97       	sbiw	r28, 0x0b	; 11
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	9f 93       	push	r25
     242:	8f 93       	push	r24
     244:	7f 93       	push	r23
     246:	6f 93       	push	r22
     248:	80 e6       	ldi	r24, 0x60	; 96
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	8e 01       	movw	r16, r28
     252:	0f 5f       	subi	r16, 0xFF	; 255
     254:	1f 4f       	sbci	r17, 0xFF	; 255
     256:	1f 93       	push	r17
     258:	0f 93       	push	r16
     25a:	0e 94 2c 10 	call	0x2058	; 0x2058 <sprintf>
     25e:	c8 01       	movw	r24, r16
     260:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	2b 96       	adiw	r28, 0x0b	; 11
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <LCD_voidGoToSpecificPosition>:
	}
}

void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position) {
	u8 address;
	switch (copy_u8LineNumber) {
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	31 f0       	breq	.+12     	; 0x294 <LCD_voidGoToSpecificPosition+0x10>
     288:	50 f0       	brcs	.+20     	; 0x29e <LCD_voidGoToSpecificPosition+0x1a>
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	29 f0       	breq	.+10     	; 0x298 <LCD_voidGoToSpecificPosition+0x14>
     28e:	83 30       	cpi	r24, 0x03	; 3
     290:	29 f0       	breq	.+10     	; 0x29c <LCD_voidGoToSpecificPosition+0x18>
     292:	08 95       	ret
		case 0:
		address = 0x00 + copy_u8Position;
		break;
		case 1:
		address = 0x40 + copy_u8Position;
     294:	60 5c       	subi	r22, 0xC0	; 192
		break;
     296:	03 c0       	rjmp	.+6      	; 0x29e <LCD_voidGoToSpecificPosition+0x1a>
		case 2:
		address = 0x14 + copy_u8Position;
     298:	6c 5e       	subi	r22, 0xEC	; 236
		break;
     29a:	01 c0       	rjmp	.+2      	; 0x29e <LCD_voidGoToSpecificPosition+0x1a>
		case 3:
		address = 0x54 + copy_u8Position;
     29c:	6c 5a       	subi	r22, 0xAC	; 172
		break;
		default:
		return; /* Invalid line number */
	}
	LCD_voidSendCommand(LCD_CMD_SET_CURSOR_POSITION | address);
     29e:	86 2f       	mov	r24, r22
     2a0:	80 68       	ori	r24, 0x80	; 128
     2a2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_voidSendCommand>
     2a6:	08 95       	ret

000002a8 <PWM_DRAWER_voidStart>:

void PWM_DRAWER_voidStart(){
	
	
	
	LCD_voidInit();
     2a8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

	// Clear the display
	LCD_voidClear();
     2ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
	LCD_voidGoToSpecificPosition(0,0);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("welcome to my");
     2b8:	83 e6       	ldi	r24, 0x63	; 99
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,0);
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("graduation project");
     2c8:	81 e7       	ldi	r24, 0x71	; 113
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,8);
     2d0:	68 e0       	ldi	r22, 0x08	; 8
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("with");
     2d8:	84 e8       	ldi	r24, 0x84	; 132
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	LCD_voidGoToSpecificPosition(3,0);
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("--------AMIT--------");
     2e8:	89 e8       	ldi	r24, 0x89	; 137
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	8f e4       	ldi	r24, 0x4F	; 79
     2f4:	93 ec       	ldi	r25, 0xC3	; 195
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	80 40       	sbci	r24, 0x00	; 0
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <PWM_DRAWER_voidStart+0x4e>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <PWM_DRAWER_voidStart+0x58>
     300:	00 00       	nop
	
	
	_delay_ms(4000);
	LCD_voidClear();
     302:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
	
	
	LCD_voidGoToSpecificPosition(1,0);
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("-----PWM_DRAWER-----");
     30e:	8e e9       	ldi	r24, 0x9E	; 158
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	LCD_voidDisplayString("BY: AHMED ALI");
     316:	83 eb       	ldi	r24, 0xB3	; 179
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	8f e4       	ldi	r24, 0x4F	; 79
     322:	93 ec       	ldi	r25, 0xC3	; 195
     324:	21 50       	subi	r18, 0x01	; 1
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <PWM_DRAWER_voidStart+0x7c>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <PWM_DRAWER_voidStart+0x86>
     32e:	00 00       	nop
	_delay_ms(4000);
	LCD_voidClear();
     330:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
     334:	08 95       	ret

00000336 <LCD_voidScrollPattern100>:
	
	
}


void LCD_voidScrollPattern100(u8 freq1) {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	6f 97       	sbiw	r28, 0x1f	; 31
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "---------";
     34a:	9a e0       	ldi	r25, 0x0A	; 10
     34c:	ec ec       	ldi	r30, 0xCC	; 204
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	9e 01       	movw	r18, r28
     352:	2f 5f       	subi	r18, 0xFF	; 255
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	d9 01       	movw	r26, r18
     358:	01 90       	ld	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	9a 95       	dec	r25
     35e:	e1 f7       	brne	.-8      	; 0x358 <LCD_voidScrollPattern100+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     360:	f9 01       	movw	r30, r18
     362:	01 90       	ld	r0, Z+
     364:	00 20       	and	r0, r0
     366:	e9 f7       	brne	.-6      	; 0x362 <LCD_voidScrollPattern100+0x2c>
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	8f 01       	movw	r16, r30
     36c:	02 1b       	sub	r16, r18
     36e:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time1=1000/freq1;
     370:	68 2f       	mov	r22, r24
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	88 ee       	ldi	r24, 0xE8	; 232
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     37c:	f6 2e       	mov	r15, r22
	
	LCD_voidGoToSpecificPosition(2,0);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     386:	81 ec       	ldi	r24, 0xC1	; 193
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time1);
     38e:	6f 2d       	mov	r22, r15
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     39a:	89 ec       	ldi	r24, 0xC9	; 201
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>

void LCD_voidScrollPattern100(u8 freq1) {
	char pattern[] = "---------";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     3a2:	f1 2c       	mov	r15, r1
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time1);
	LCD_voidDisplayString("ms");

	while (1) {
		for (u8 i = 0; i < 20; i++) {
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	18 c0       	rjmp	.+48     	; 0x3d8 <LCD_voidScrollPattern100+0xa2>
			display[i] = pattern[(pos + i) % length];
     3a8:	24 2f       	mov	r18, r20
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	c9 01       	movw	r24, r18
     3ae:	8f 0d       	add	r24, r15
     3b0:	91 1d       	adc	r25, r1
     3b2:	b8 01       	movw	r22, r16
     3b4:	77 27       	eor	r23, r23
     3b6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ec 0f       	add	r30, r28
     3c0:	fd 1f       	adc	r31, r29
     3c2:	e8 0f       	add	r30, r24
     3c4:	f9 1f       	adc	r31, r25
     3c6:	90 81       	ld	r25, Z
     3c8:	eb e0       	ldi	r30, 0x0B	; 11
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ec 0f       	add	r30, r28
     3ce:	fd 1f       	adc	r31, r29
     3d0:	e2 0f       	add	r30, r18
     3d2:	f3 1f       	adc	r31, r19
     3d4:	90 83       	st	Z, r25
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time1);
	LCD_voidDisplayString("ms");

	while (1) {
		for (u8 i = 0; i < 20; i++) {
     3d6:	4f 5f       	subi	r20, 0xFF	; 255
     3d8:	44 31       	cpi	r20, 0x14	; 20
     3da:	30 f3       	brcs	.-52     	; 0x3a8 <LCD_voidScrollPattern100+0x72>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     3dc:	1f 8e       	std	Y+31, r1	; 0x1f

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     3e6:	ce 01       	movw	r24, r28
     3e8:	0b 96       	adiw	r24, 0x0b	; 11
     3ea:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	85 ea       	ldi	r24, 0xA5	; 165
     3f2:	9e e0       	ldi	r25, 0x0E	; 14
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	80 40       	sbci	r24, 0x00	; 0
     3f8:	90 40       	sbci	r25, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <LCD_voidScrollPattern100+0xbe>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_voidScrollPattern100+0xc8>
     3fe:	00 00       	nop
		
		
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     400:	8f 2d       	mov	r24, r15
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	b8 01       	movw	r22, r16
     408:	77 27       	eor	r23, r23
     40a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     40e:	f8 2e       	mov	r15, r24
	}
     410:	c9 cf       	rjmp	.-110    	; 0x3a4 <LCD_voidScrollPattern100+0x6e>

00000412 <LCD_voidScrollPattern90>:
}

void LCD_voidScrollPattern90  (u8 freq2){
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	a2 97       	sbiw	r28, 0x22	; 34
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "---------|_|";
     426:	9d e0       	ldi	r25, 0x0D	; 13
     428:	e4 ee       	ldi	r30, 0xE4	; 228
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	9e 01       	movw	r18, r28
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	d9 01       	movw	r26, r18
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	9a 95       	dec	r25
     43a:	e1 f7       	brne	.-8      	; 0x434 <LCD_voidScrollPattern90+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     43c:	f9 01       	movw	r30, r18
     43e:	01 90       	ld	r0, Z+
     440:	00 20       	and	r0, r0
     442:	e9 f7       	brne	.-6      	; 0x43e <LCD_voidScrollPattern90+0x2c>
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	8f 01       	movw	r16, r30
     448:	02 1b       	sub	r16, r18
     44a:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time2=1000/freq2;
     44c:	68 2f       	mov	r22, r24
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	88 ee       	ldi	r24, 0xE8	; 232
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     458:	9b 01       	movw	r18, r22
     45a:	e6 2e       	mov	r14, r22
	u8 Ton=(time2*9)/10;
     45c:	cb 01       	movw	r24, r22
     45e:	99 27       	eor	r25, r25
     460:	ac 01       	movw	r20, r24
     462:	44 0f       	add	r20, r20
     464:	55 1f       	adc	r21, r21
     466:	44 0f       	add	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	44 0f       	add	r20, r20
     46c:	55 1f       	adc	r21, r21
     46e:	84 0f       	add	r24, r20
     470:	95 1f       	adc	r25, r21
     472:	6a e0       	ldi	r22, 0x0A	; 10
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     47a:	d6 2e       	mov	r13, r22
	u8 Toff=time2-Ton;
     47c:	f2 2e       	mov	r15, r18
     47e:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     488:	86 ed       	ldi	r24, 0xD6	; 214
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     490:	6d 2d       	mov	r22, r13
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     49c:	89 ec       	ldi	r24, 0xC9	; 201
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     4a4:	69 e0       	ldi	r22, 0x09	; 9
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     4ac:	8c ed       	ldi	r24, 0xDC	; 220
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     4b4:	6f 2d       	mov	r22, r15
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     4c0:	89 ec       	ldi	r24, 0xC9	; 201
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     4c8:	69 e0       	ldi	r22, 0x09	; 9
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     4d0:	81 ec       	ldi	r24, 0xC1	; 193
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time2);
     4d8:	6e 2d       	mov	r22, r14
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     4e4:	89 ec       	ldi	r24, 0xC9	; 201
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>

void LCD_voidScrollPattern90  (u8 freq2){
	char pattern[] = "---------|_|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     4ec:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time2);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	18 c0       	rjmp	.+48     	; 0x522 <LCD_voidScrollPattern90+0x110>
			display[i] = pattern[(pos + i) % length];
     4f2:	24 2f       	mov	r18, r20
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	c9 01       	movw	r24, r18
     4f8:	8f 0d       	add	r24, r15
     4fa:	91 1d       	adc	r25, r1
     4fc:	b8 01       	movw	r22, r16
     4fe:	77 27       	eor	r23, r23
     500:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     504:	e1 e0       	ldi	r30, 0x01	; 1
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	ec 0f       	add	r30, r28
     50a:	fd 1f       	adc	r31, r29
     50c:	e8 0f       	add	r30, r24
     50e:	f9 1f       	adc	r31, r25
     510:	90 81       	ld	r25, Z
     512:	ee e0       	ldi	r30, 0x0E	; 14
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	ec 0f       	add	r30, r28
     518:	fd 1f       	adc	r31, r29
     51a:	e2 0f       	add	r30, r18
     51c:	f3 1f       	adc	r31, r19
     51e:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time2);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     520:	4f 5f       	subi	r20, 0xFF	; 255
     522:	44 31       	cpi	r20, 0x14	; 20
     524:	30 f3       	brcs	.-52     	; 0x4f2 <LCD_voidScrollPattern90+0xe0>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     526:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     530:	ce 01       	movw	r24, r28
     532:	0e 96       	adiw	r24, 0x0e	; 14
     534:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	85 ea       	ldi	r24, 0xA5	; 165
     53c:	9e e0       	ldi	r25, 0x0E	; 14
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <LCD_voidScrollPattern90+0x12c>
     546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_voidScrollPattern90+0x136>
     548:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     54a:	8f 2d       	mov	r24, r15
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	b8 01       	movw	r22, r16
     552:	77 27       	eor	r23, r23
     554:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     558:	f8 2e       	mov	r15, r24
	}
     55a:	c9 cf       	rjmp	.-110    	; 0x4ee <LCD_voidScrollPattern90+0xdc>

0000055c <LCD_voidScrollPattern80>:
}
void LCD_voidScrollPattern80  (u8 freq3){
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	a2 97       	sbiw	r28, 0x22	; 34
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "--------|__|";
     570:	9d e0       	ldi	r25, 0x0D	; 13
     572:	e1 ef       	ldi	r30, 0xF1	; 241
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	9e 01       	movw	r18, r28
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	d9 01       	movw	r26, r18
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	9a 95       	dec	r25
     584:	e1 f7       	brne	.-8      	; 0x57e <LCD_voidScrollPattern80+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     586:	f9 01       	movw	r30, r18
     588:	01 90       	ld	r0, Z+
     58a:	00 20       	and	r0, r0
     58c:	e9 f7       	brne	.-6      	; 0x588 <LCD_voidScrollPattern80+0x2c>
     58e:	31 97       	sbiw	r30, 0x01	; 1
     590:	8f 01       	movw	r16, r30
     592:	02 1b       	sub	r16, r18
     594:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time3=1000/freq3;
     596:	68 2f       	mov	r22, r24
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	88 ee       	ldi	r24, 0xE8	; 232
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     5a2:	9b 01       	movw	r18, r22
     5a4:	e6 2e       	mov	r14, r22
	u8 Ton=(time3*8)/10;
     5a6:	cb 01       	movw	r24, r22
     5a8:	99 27       	eor	r25, r25
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	6a e0       	ldi	r22, 0x0A	; 10
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     5be:	d6 2e       	mov	r13, r22
	u8 Toff=time3-Ton;
     5c0:	f2 2e       	mov	r15, r18
     5c2:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     5cc:	86 ed       	ldi	r24, 0xD6	; 214
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     5d4:	6d 2d       	mov	r22, r13
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     5e0:	89 ec       	ldi	r24, 0xC9	; 201
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     5e8:	69 e0       	ldi	r22, 0x09	; 9
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     5f0:	8c ed       	ldi	r24, 0xDC	; 220
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     5f8:	6f 2d       	mov	r22, r15
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     604:	89 ec       	ldi	r24, 0xC9	; 201
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     60c:	69 e0       	ldi	r22, 0x09	; 9
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     614:	81 ec       	ldi	r24, 0xC1	; 193
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time3);
     61c:	6e 2d       	mov	r22, r14
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     628:	89 ec       	ldi	r24, 0xC9	; 201
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
}
void LCD_voidScrollPattern80  (u8 freq3){
	char pattern[] = "--------|__|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     630:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time3);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	18 c0       	rjmp	.+48     	; 0x666 <LCD_voidScrollPattern80+0x10a>
			display[i] = pattern[(pos + i) % length];
     636:	24 2f       	mov	r18, r20
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	c9 01       	movw	r24, r18
     63c:	8f 0d       	add	r24, r15
     63e:	91 1d       	adc	r25, r1
     640:	b8 01       	movw	r22, r16
     642:	77 27       	eor	r23, r23
     644:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     648:	e1 e0       	ldi	r30, 0x01	; 1
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	ec 0f       	add	r30, r28
     64e:	fd 1f       	adc	r31, r29
     650:	e8 0f       	add	r30, r24
     652:	f9 1f       	adc	r31, r25
     654:	90 81       	ld	r25, Z
     656:	ee e0       	ldi	r30, 0x0E	; 14
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	e2 0f       	add	r30, r18
     660:	f3 1f       	adc	r31, r19
     662:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time3);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     664:	4f 5f       	subi	r20, 0xFF	; 255
     666:	44 31       	cpi	r20, 0x14	; 20
     668:	30 f3       	brcs	.-52     	; 0x636 <LCD_voidScrollPattern80+0xda>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     66a:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     674:	ce 01       	movw	r24, r28
     676:	0e 96       	adiw	r24, 0x0e	; 14
     678:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	85 ea       	ldi	r24, 0xA5	; 165
     680:	9e e0       	ldi	r25, 0x0E	; 14
     682:	21 50       	subi	r18, 0x01	; 1
     684:	80 40       	sbci	r24, 0x00	; 0
     686:	90 40       	sbci	r25, 0x00	; 0
     688:	e1 f7       	brne	.-8      	; 0x682 <LCD_voidScrollPattern80+0x126>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <LCD_voidScrollPattern80+0x130>
     68c:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     68e:	8f 2d       	mov	r24, r15
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	b8 01       	movw	r22, r16
     696:	77 27       	eor	r23, r23
     698:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     69c:	f8 2e       	mov	r15, r24
	}
     69e:	c9 cf       	rjmp	.-110    	; 0x632 <LCD_voidScrollPattern80+0xd6>

000006a0 <LCD_voidScrollPattern75>:
}

void LCD_voidScrollPattern75(u8 freq4){
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	a0 97       	sbiw	r28, 0x20	; 32
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "------|__|";
     6b4:	9b e0       	ldi	r25, 0x0B	; 11
     6b6:	e3 ef       	ldi	r30, 0xF3	; 243
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	9e 01       	movw	r18, r28
     6bc:	2f 5f       	subi	r18, 0xFF	; 255
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	d9 01       	movw	r26, r18
     6c2:	01 90       	ld	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	9a 95       	dec	r25
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <LCD_voidScrollPattern75+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     6ca:	f9 01       	movw	r30, r18
     6cc:	01 90       	ld	r0, Z+
     6ce:	00 20       	and	r0, r0
     6d0:	e9 f7       	brne	.-6      	; 0x6cc <LCD_voidScrollPattern75+0x2c>
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	8f 01       	movw	r16, r30
     6d6:	02 1b       	sub	r16, r18
     6d8:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time4=1000/freq4;
     6da:	68 2f       	mov	r22, r24
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	88 ee       	ldi	r24, 0xE8	; 232
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     6e6:	e6 2e       	mov	r14, r22
	u8 Ton=(time4*3)/4;
     6e8:	9b 01       	movw	r18, r22
     6ea:	33 27       	eor	r19, r19
     6ec:	a9 01       	movw	r20, r18
     6ee:	44 0f       	add	r20, r20
     6f0:	55 1f       	adc	r21, r21
     6f2:	42 0f       	add	r20, r18
     6f4:	53 1f       	adc	r21, r19
     6f6:	9a 01       	movw	r18, r20
     6f8:	55 23       	and	r21, r21
     6fa:	14 f4       	brge	.+4      	; 0x700 <LCD_voidScrollPattern75+0x60>
     6fc:	2d 5f       	subi	r18, 0xFD	; 253
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	35 95       	asr	r19
     702:	27 95       	ror	r18
     704:	35 95       	asr	r19
     706:	27 95       	ror	r18
     708:	d2 2e       	mov	r13, r18
	u8 Toff=time4-Ton;
     70a:	f6 2e       	mov	r15, r22
     70c:	f2 1a       	sub	r15, r18
	LCD_voidGoToSpecificPosition(2,0);
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     716:	86 ed       	ldi	r24, 0xD6	; 214
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     71e:	6d 2d       	mov	r22, r13
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     72a:	89 ec       	ldi	r24, 0xC9	; 201
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     732:	69 e0       	ldi	r22, 0x09	; 9
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     73a:	8c ed       	ldi	r24, 0xDC	; 220
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     742:	6f 2d       	mov	r22, r15
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     74e:	89 ec       	ldi	r24, 0xC9	; 201
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     756:	69 e0       	ldi	r22, 0x09	; 9
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     75e:	81 ec       	ldi	r24, 0xC1	; 193
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time4);
     766:	6e 2d       	mov	r22, r14
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     772:	89 ec       	ldi	r24, 0xC9	; 201
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>

void LCD_voidScrollPattern75(u8 freq4){
	char pattern[] = "------|__|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     77a:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time4);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	18 c0       	rjmp	.+48     	; 0x7b0 <LCD_voidScrollPattern75+0x110>
			display[i] = pattern[(pos + i) % length];
     780:	24 2f       	mov	r18, r20
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	c9 01       	movw	r24, r18
     786:	8f 0d       	add	r24, r15
     788:	91 1d       	adc	r25, r1
     78a:	b8 01       	movw	r22, r16
     78c:	77 27       	eor	r23, r23
     78e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     792:	e1 e0       	ldi	r30, 0x01	; 1
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ec 0f       	add	r30, r28
     798:	fd 1f       	adc	r31, r29
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	90 81       	ld	r25, Z
     7a0:	ec e0       	ldi	r30, 0x0C	; 12
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	ec 0f       	add	r30, r28
     7a6:	fd 1f       	adc	r31, r29
     7a8:	e2 0f       	add	r30, r18
     7aa:	f3 1f       	adc	r31, r19
     7ac:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time4);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     7ae:	4f 5f       	subi	r20, 0xFF	; 255
     7b0:	44 31       	cpi	r20, 0x14	; 20
     7b2:	30 f3       	brcs	.-52     	; 0x780 <LCD_voidScrollPattern75+0xe0>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     7b4:	18 a2       	std	Y+32, r1	; 0x20

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     7be:	ce 01       	movw	r24, r28
     7c0:	0c 96       	adiw	r24, 0x0c	; 12
     7c2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     7c6:	2f ef       	ldi	r18, 0xFF	; 255
     7c8:	85 ea       	ldi	r24, 0xA5	; 165
     7ca:	9e e0       	ldi	r25, 0x0E	; 14
     7cc:	21 50       	subi	r18, 0x01	; 1
     7ce:	80 40       	sbci	r24, 0x00	; 0
     7d0:	90 40       	sbci	r25, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <LCD_voidScrollPattern75+0x12c>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <LCD_voidScrollPattern75+0x136>
     7d6:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     7d8:	8f 2d       	mov	r24, r15
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	b8 01       	movw	r22, r16
     7e0:	77 27       	eor	r23, r23
     7e2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     7e6:	f8 2e       	mov	r15, r24
	}
     7e8:	c9 cf       	rjmp	.-110    	; 0x77c <LCD_voidScrollPattern75+0xdc>

000007ea <LCD_voidScrollPattern70>:
	
	
	
}

void LCD_voidScrollPattern70  (u8 freq5){
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	a2 97       	sbiw	r28, 0x22	; 34
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "-------|___|";
     7fe:	9d e0       	ldi	r25, 0x0D	; 13
     800:	ee ef       	ldi	r30, 0xFE	; 254
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	9e 01       	movw	r18, r28
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	d9 01       	movw	r26, r18
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	9a 95       	dec	r25
     812:	e1 f7       	brne	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     814:	f9 01       	movw	r30, r18
     816:	01 90       	ld	r0, Z+
     818:	00 20       	and	r0, r0
     81a:	e9 f7       	brne	.-6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	8f 01       	movw	r16, r30
     820:	02 1b       	sub	r16, r18
     822:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time5=1000/freq5;
     824:	68 2f       	mov	r22, r24
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     830:	9b 01       	movw	r18, r22
     832:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time5*7)/10;
     834:	ab 01       	movw	r20, r22
     836:	55 27       	eor	r21, r21
     838:	ca 01       	movw	r24, r20
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	84 1b       	sub	r24, r20
     848:	95 0b       	sbc	r25, r21
     84a:	6a e0       	ldi	r22, 0x0A	; 10
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     852:	d6 2e       	mov	r13, r22
	u8 Toff=time5-Ton;
     854:	f2 2e       	mov	r15, r18
     856:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     860:	86 ed       	ldi	r24, 0xD6	; 214
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     868:	6d 2d       	mov	r22, r13
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     874:	89 ec       	ldi	r24, 0xC9	; 201
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     87c:	69 e0       	ldi	r22, 0x09	; 9
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     884:	8c ed       	ldi	r24, 0xDC	; 220
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     88c:	6f 2d       	mov	r22, r15
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     898:	89 ec       	ldi	r24, 0xC9	; 201
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	LCD_voidGoToSpecificPosition(1,9);
     8a0:	69 e0       	ldi	r22, 0x09	; 9
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     8a8:	81 ec       	ldi	r24, 0xC1	; 193
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time5);
     8b0:	6e 2d       	mov	r22, r14
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     8bc:	89 ec       	ldi	r24, 0xC9	; 201
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>

void LCD_voidScrollPattern70  (u8 freq5){
	char pattern[] = "-------|___|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     8c4:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time5);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	18 c0       	rjmp	.+48     	; 0x8fa <__stack+0x9b>
			display[i] = pattern[(pos + i) % length];
     8ca:	24 2f       	mov	r18, r20
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	c9 01       	movw	r24, r18
     8d0:	8f 0d       	add	r24, r15
     8d2:	91 1d       	adc	r25, r1
     8d4:	b8 01       	movw	r22, r16
     8d6:	77 27       	eor	r23, r23
     8d8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     8dc:	e1 e0       	ldi	r30, 0x01	; 1
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ec 0f       	add	r30, r28
     8e2:	fd 1f       	adc	r31, r29
     8e4:	e8 0f       	add	r30, r24
     8e6:	f9 1f       	adc	r31, r25
     8e8:	90 81       	ld	r25, Z
     8ea:	ee e0       	ldi	r30, 0x0E	; 14
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	e2 0f       	add	r30, r18
     8f4:	f3 1f       	adc	r31, r19
     8f6:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time5);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	44 31       	cpi	r20, 0x14	; 20
     8fc:	30 f3       	brcs	.-52     	; 0x8ca <__stack+0x6b>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     8fe:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     908:	ce 01       	movw	r24, r28
     90a:	0e 96       	adiw	r24, 0x0e	; 14
     90c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     910:	2f ef       	ldi	r18, 0xFF	; 255
     912:	85 ea       	ldi	r24, 0xA5	; 165
     914:	9e e0       	ldi	r25, 0x0E	; 14
     916:	21 50       	subi	r18, 0x01	; 1
     918:	80 40       	sbci	r24, 0x00	; 0
     91a:	90 40       	sbci	r25, 0x00	; 0
     91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0xb7>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0xc1>
     920:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     922:	8f 2d       	mov	r24, r15
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	b8 01       	movw	r22, r16
     92a:	77 27       	eor	r23, r23
     92c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     930:	f8 2e       	mov	r15, r24
	}
     932:	c9 cf       	rjmp	.-110    	; 0x8c6 <__stack+0x67>

00000934 <LCD_voidScrollPattern60>:
}
void LCD_voidScrollPattern60  (u8 freq6){
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	a2 97       	sbiw	r28, 0x22	; 34
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "------|____|";
     948:	9d e0       	ldi	r25, 0x0D	; 13
     94a:	eb e0       	ldi	r30, 0x0B	; 11
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	9e 01       	movw	r18, r28
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	3f 4f       	sbci	r19, 0xFF	; 255
     954:	d9 01       	movw	r26, r18
     956:	01 90       	ld	r0, Z+
     958:	0d 92       	st	X+, r0
     95a:	9a 95       	dec	r25
     95c:	e1 f7       	brne	.-8      	; 0x956 <LCD_voidScrollPattern60+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     95e:	f9 01       	movw	r30, r18
     960:	01 90       	ld	r0, Z+
     962:	00 20       	and	r0, r0
     964:	e9 f7       	brne	.-6      	; 0x960 <LCD_voidScrollPattern60+0x2c>
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	8f 01       	movw	r16, r30
     96a:	02 1b       	sub	r16, r18
     96c:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time6=1000/freq6;
     96e:	68 2f       	mov	r22, r24
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	88 ee       	ldi	r24, 0xE8	; 232
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     97a:	9b 01       	movw	r18, r22
     97c:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time6*6)/10;
     97e:	cb 01       	movw	r24, r22
     980:	99 27       	eor	r25, r25
     982:	ac 01       	movw	r20, r24
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	84 0f       	add	r24, r20
     98a:	95 1f       	adc	r25, r21
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	6a e0       	ldi	r22, 0x0A	; 10
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     998:	d6 2e       	mov	r13, r22
	u8 Toff=time6-Ton;
     99a:	f2 2e       	mov	r15, r18
     99c:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     9a6:	86 ed       	ldi	r24, 0xD6	; 214
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     9ae:	6d 2d       	mov	r22, r13
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     9ba:	89 ec       	ldi	r24, 0xC9	; 201
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     9c2:	69 e0       	ldi	r22, 0x09	; 9
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     9ca:	8c ed       	ldi	r24, 0xDC	; 220
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     9d2:	6f 2d       	mov	r22, r15
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     9de:	89 ec       	ldi	r24, 0xC9	; 201
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     9e6:	69 e0       	ldi	r22, 0x09	; 9
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     9ee:	81 ec       	ldi	r24, 0xC1	; 193
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time6);
     9f6:	6e 2d       	mov	r22, r14
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     a02:	89 ec       	ldi	r24, 0xC9	; 201
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
}
void LCD_voidScrollPattern60  (u8 freq6){
	char pattern[] = "------|____|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     a0a:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time6);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	18 c0       	rjmp	.+48     	; 0xa40 <LCD_voidScrollPattern60+0x10c>
			display[i] = pattern[(pos + i) % length];
     a10:	24 2f       	mov	r18, r20
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	c9 01       	movw	r24, r18
     a16:	8f 0d       	add	r24, r15
     a18:	91 1d       	adc	r25, r1
     a1a:	b8 01       	movw	r22, r16
     a1c:	77 27       	eor	r23, r23
     a1e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     a22:	e1 e0       	ldi	r30, 0x01	; 1
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	ec 0f       	add	r30, r28
     a28:	fd 1f       	adc	r31, r29
     a2a:	e8 0f       	add	r30, r24
     a2c:	f9 1f       	adc	r31, r25
     a2e:	90 81       	ld	r25, Z
     a30:	ee e0       	ldi	r30, 0x0E	; 14
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	ec 0f       	add	r30, r28
     a36:	fd 1f       	adc	r31, r29
     a38:	e2 0f       	add	r30, r18
     a3a:	f3 1f       	adc	r31, r19
     a3c:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time6);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     a3e:	4f 5f       	subi	r20, 0xFF	; 255
     a40:	44 31       	cpi	r20, 0x14	; 20
     a42:	30 f3       	brcs	.-52     	; 0xa10 <LCD_voidScrollPattern60+0xdc>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     a44:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 96       	adiw	r24, 0x0e	; 14
     a52:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     a56:	2f ef       	ldi	r18, 0xFF	; 255
     a58:	85 ea       	ldi	r24, 0xA5	; 165
     a5a:	9e e0       	ldi	r25, 0x0E	; 14
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	80 40       	sbci	r24, 0x00	; 0
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <LCD_voidScrollPattern60+0x128>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_voidScrollPattern60+0x132>
     a66:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     a68:	8f 2d       	mov	r24, r15
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	b8 01       	movw	r22, r16
     a70:	77 27       	eor	r23, r23
     a72:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     a76:	f8 2e       	mov	r15, r24
	}
     a78:	c9 cf       	rjmp	.-110    	; 0xa0c <LCD_voidScrollPattern60+0xd8>

00000a7a <LCD_voidScrollPattern50>:
}

void LCD_voidScrollPattern50(u8 freq7){
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	a2 97       	sbiw	r28, 0x22	; 34
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
	
	
	char pattern[] = "-----|_____|";
     a8e:	9d e0       	ldi	r25, 0x0D	; 13
     a90:	e8 e1       	ldi	r30, 0x18	; 24
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	9e 01       	movw	r18, r28
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	d9 01       	movw	r26, r18
     a9c:	01 90       	ld	r0, Z+
     a9e:	0d 92       	st	X+, r0
     aa0:	9a 95       	dec	r25
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <LCD_voidScrollPattern50+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     aa4:	f9 01       	movw	r30, r18
     aa6:	01 90       	ld	r0, Z+
     aa8:	00 20       	and	r0, r0
     aaa:	e9 f7       	brne	.-6      	; 0xaa6 <LCD_voidScrollPattern50+0x2c>
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	8f 01       	movw	r16, r30
     ab0:	02 1b       	sub	r16, r18
     ab2:	13 0b       	sbc	r17, r19
	u8 pos = 0;
    u8 time7=1000/freq7;
     ab4:	68 2f       	mov	r22, r24
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	88 ee       	ldi	r24, 0xE8	; 232
     aba:	93 e0       	ldi	r25, 0x03	; 3
     abc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     ac0:	9b 01       	movw	r18, r22
     ac2:	e6 2e       	mov	r14, r22

u8 Ton=(time7*5)/10;
     ac4:	cb 01       	movw	r24, r22
     ac6:	99 27       	eor	r25, r25
     ac8:	ac 01       	movw	r20, r24
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	44 0f       	add	r20, r20
     ad0:	55 1f       	adc	r21, r21
     ad2:	84 0f       	add	r24, r20
     ad4:	95 1f       	adc	r25, r21
     ad6:	6a e0       	ldi	r22, 0x0A	; 10
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     ade:	d6 2e       	mov	r13, r22
u8 Toff=time7-Ton;
     ae0:	f2 2e       	mov	r15, r18
     ae2:	f6 1a       	sub	r15, r22
LCD_voidGoToSpecificPosition(2,0);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString("Ton= ");
     aec:	86 ed       	ldi	r24, 0xD6	; 214
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(Ton);
     af4:	6d 2d       	mov	r22, r13
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
     b00:	89 ec       	ldi	r24, 0xC9	; 201
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidGoToSpecificPosition(2,9);
     b08:	69 e0       	ldi	r22, 0x09	; 9
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString(" Toff= ");
     b10:	8c ed       	ldi	r24, 0xDC	; 220
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(Toff);
     b18:	6f 2d       	mov	r22, r15
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>

LCD_voidDisplayString("ms");
     b24:	89 ec       	ldi	r24, 0xC9	; 201
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidGoToSpecificPosition(1,9);
     b2c:	69 e0       	ldi	r22, 0x09	; 9
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString("time = ");
     b34:	81 ec       	ldi	r24, 0xC1	; 193
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(time7);
     b3c:	6e 2d       	mov	r22, r14
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
     b48:	89 ec       	ldi	r24, 0xC9	; 201
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	
	char pattern[] = "-----|_____|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     b50:	f1 2c       	mov	r15, r1
LCD_voidGoToSpecificPosition(1,9);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time7);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	18 c0       	rjmp	.+48     	; 0xb86 <LCD_voidScrollPattern50+0x10c>
			display[i] = pattern[(pos + i) % length];
     b56:	24 2f       	mov	r18, r20
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	c9 01       	movw	r24, r18
     b5c:	8f 0d       	add	r24, r15
     b5e:	91 1d       	adc	r25, r1
     b60:	b8 01       	movw	r22, r16
     b62:	77 27       	eor	r23, r23
     b64:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     b68:	e1 e0       	ldi	r30, 0x01	; 1
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	ec 0f       	add	r30, r28
     b6e:	fd 1f       	adc	r31, r29
     b70:	e8 0f       	add	r30, r24
     b72:	f9 1f       	adc	r31, r25
     b74:	90 81       	ld	r25, Z
     b76:	ee e0       	ldi	r30, 0x0E	; 14
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ec 0f       	add	r30, r28
     b7c:	fd 1f       	adc	r31, r29
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	90 83       	st	Z, r25
LCD_voidGoToSpecificPosition(1,9);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time7);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     b84:	4f 5f       	subi	r20, 0xFF	; 255
     b86:	44 31       	cpi	r20, 0x14	; 20
     b88:	30 f3       	brcs	.-52     	; 0xb56 <LCD_voidScrollPattern50+0xdc>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     b8a:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     b94:	ce 01       	movw	r24, r28
     b96:	0e 96       	adiw	r24, 0x0e	; 14
     b98:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	85 ea       	ldi	r24, 0xA5	; 165
     ba0:	9e e0       	ldi	r25, 0x0E	; 14
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	90 40       	sbci	r25, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <LCD_voidScrollPattern50+0x128>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <LCD_voidScrollPattern50+0x132>
     bac:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     bae:	8f 2d       	mov	r24, r15
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	b8 01       	movw	r22, r16
     bb6:	77 27       	eor	r23, r23
     bb8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     bbc:	f8 2e       	mov	r15, r24
	}
     bbe:	c9 cf       	rjmp	.-110    	; 0xb52 <LCD_voidScrollPattern50+0xd8>

00000bc0 <LCD_voidScrollPattern40>:
	
	
}

void LCD_voidScrollPattern40  (u8 freq8){
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	a2 97       	sbiw	r28, 0x22	; 34
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "----|______|";
     bd4:	9d e0       	ldi	r25, 0x0D	; 13
     bd6:	e5 e2       	ldi	r30, 0x25	; 37
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	9e 01       	movw	r18, r28
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	d9 01       	movw	r26, r18
     be2:	01 90       	ld	r0, Z+
     be4:	0d 92       	st	X+, r0
     be6:	9a 95       	dec	r25
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <LCD_voidScrollPattern40+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     bea:	f9 01       	movw	r30, r18
     bec:	01 90       	ld	r0, Z+
     bee:	00 20       	and	r0, r0
     bf0:	e9 f7       	brne	.-6      	; 0xbec <LCD_voidScrollPattern40+0x2c>
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	8f 01       	movw	r16, r30
     bf6:	02 1b       	sub	r16, r18
     bf8:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time8=1000/freq8;
     bfa:	68 2f       	mov	r22, r24
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	88 ee       	ldi	r24, 0xE8	; 232
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     c06:	9b 01       	movw	r18, r22
     c08:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time8*4)/10;
     c0a:	cb 01       	movw	r24, r22
     c0c:	99 27       	eor	r25, r25
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	6a e0       	ldi	r22, 0x0A	; 10
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     c1e:	d6 2e       	mov	r13, r22
	u8 Toff=time8-Ton;
     c20:	f2 2e       	mov	r15, r18
     c22:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     c2c:	86 ed       	ldi	r24, 0xD6	; 214
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     c34:	6d 2d       	mov	r22, r13
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     c40:	89 ec       	ldi	r24, 0xC9	; 201
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     c48:	69 e0       	ldi	r22, 0x09	; 9
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     c50:	8c ed       	ldi	r24, 0xDC	; 220
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     c58:	6f 2d       	mov	r22, r15
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     c64:	89 ec       	ldi	r24, 0xC9	; 201
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     c6c:	69 e0       	ldi	r22, 0x09	; 9
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     c74:	81 ec       	ldi	r24, 0xC1	; 193
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time8);
     c7c:	6e 2d       	mov	r22, r14
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     c88:	89 ec       	ldi	r24, 0xC9	; 201
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>

void LCD_voidScrollPattern40  (u8 freq8){
	char pattern[] = "----|______|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     c90:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time8);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	18 c0       	rjmp	.+48     	; 0xcc6 <LCD_voidScrollPattern40+0x106>
			display[i] = pattern[(pos + i) % length];
     c96:	24 2f       	mov	r18, r20
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	c9 01       	movw	r24, r18
     c9c:	8f 0d       	add	r24, r15
     c9e:	91 1d       	adc	r25, r1
     ca0:	b8 01       	movw	r22, r16
     ca2:	77 27       	eor	r23, r23
     ca4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ec 0f       	add	r30, r28
     cae:	fd 1f       	adc	r31, r29
     cb0:	e8 0f       	add	r30, r24
     cb2:	f9 1f       	adc	r31, r25
     cb4:	90 81       	ld	r25, Z
     cb6:	ee e0       	ldi	r30, 0x0E	; 14
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ec 0f       	add	r30, r28
     cbc:	fd 1f       	adc	r31, r29
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time8);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     cc4:	4f 5f       	subi	r20, 0xFF	; 255
     cc6:	44 31       	cpi	r20, 0x14	; 20
     cc8:	30 f3       	brcs	.-52     	; 0xc96 <LCD_voidScrollPattern40+0xd6>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     cca:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 96       	adiw	r24, 0x0e	; 14
     cd8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     cdc:	2f ef       	ldi	r18, 0xFF	; 255
     cde:	85 ea       	ldi	r24, 0xA5	; 165
     ce0:	9e e0       	ldi	r25, 0x0E	; 14
     ce2:	21 50       	subi	r18, 0x01	; 1
     ce4:	80 40       	sbci	r24, 0x00	; 0
     ce6:	90 40       	sbci	r25, 0x00	; 0
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <LCD_voidScrollPattern40+0x122>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <LCD_voidScrollPattern40+0x12c>
     cec:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     cee:	8f 2d       	mov	r24, r15
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	b8 01       	movw	r22, r16
     cf6:	77 27       	eor	r23, r23
     cf8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     cfc:	f8 2e       	mov	r15, r24
	}
     cfe:	c9 cf       	rjmp	.-110    	; 0xc92 <LCD_voidScrollPattern40+0xd2>

00000d00 <LCD_voidScrollPattern30>:
}
void LCD_voidScrollPattern30  (u8 freq9){
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	a2 97       	sbiw	r28, 0x22	; 34
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "---|_______|";
     d14:	9d e0       	ldi	r25, 0x0D	; 13
     d16:	e2 e3       	ldi	r30, 0x32	; 50
     d18:	f1 e0       	ldi	r31, 0x01	; 1
     d1a:	9e 01       	movw	r18, r28
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	d9 01       	movw	r26, r18
     d22:	01 90       	ld	r0, Z+
     d24:	0d 92       	st	X+, r0
     d26:	9a 95       	dec	r25
     d28:	e1 f7       	brne	.-8      	; 0xd22 <LCD_voidScrollPattern30+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     d2a:	f9 01       	movw	r30, r18
     d2c:	01 90       	ld	r0, Z+
     d2e:	00 20       	and	r0, r0
     d30:	e9 f7       	brne	.-6      	; 0xd2c <LCD_voidScrollPattern30+0x2c>
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	8f 01       	movw	r16, r30
     d36:	02 1b       	sub	r16, r18
     d38:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time9=1000/freq9;
     d3a:	68 2f       	mov	r22, r24
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     d46:	9b 01       	movw	r18, r22
     d48:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time9*3)/10;
     d4a:	cb 01       	movw	r24, r22
     d4c:	99 27       	eor	r25, r25
     d4e:	ac 01       	movw	r20, r24
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	84 0f       	add	r24, r20
     d56:	95 1f       	adc	r25, r21
     d58:	6a e0       	ldi	r22, 0x0A	; 10
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     d60:	d6 2e       	mov	r13, r22
	u8 Toff=time9-Ton;
     d62:	f2 2e       	mov	r15, r18
     d64:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     d6e:	86 ed       	ldi	r24, 0xD6	; 214
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     d76:	6d 2d       	mov	r22, r13
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     d82:	89 ec       	ldi	r24, 0xC9	; 201
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     d8a:	69 e0       	ldi	r22, 0x09	; 9
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
     d92:	8c ed       	ldi	r24, 0xDC	; 220
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
     d9a:	6f 2d       	mov	r22, r15
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     da6:	89 ec       	ldi	r24, 0xC9	; 201
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
     dae:	69 e0       	ldi	r22, 0x09	; 9
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
     db6:	81 ec       	ldi	r24, 0xC1	; 193
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time9);
     dbe:	6e 2d       	mov	r22, r14
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     dca:	89 ec       	ldi	r24, 0xC9	; 201
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
}
void LCD_voidScrollPattern30  (u8 freq9){
	char pattern[] = "---|_______|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     dd2:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time9);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	18 c0       	rjmp	.+48     	; 0xe08 <LCD_voidScrollPattern30+0x108>
			display[i] = pattern[(pos + i) % length];
     dd8:	24 2f       	mov	r18, r20
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	c9 01       	movw	r24, r18
     dde:	8f 0d       	add	r24, r15
     de0:	91 1d       	adc	r25, r1
     de2:	b8 01       	movw	r22, r16
     de4:	77 27       	eor	r23, r23
     de6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     dea:	e1 e0       	ldi	r30, 0x01	; 1
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	ec 0f       	add	r30, r28
     df0:	fd 1f       	adc	r31, r29
     df2:	e8 0f       	add	r30, r24
     df4:	f9 1f       	adc	r31, r25
     df6:	90 81       	ld	r25, Z
     df8:	ee e0       	ldi	r30, 0x0E	; 14
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	ec 0f       	add	r30, r28
     dfe:	fd 1f       	adc	r31, r29
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time9);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	44 31       	cpi	r20, 0x14	; 20
     e0a:	30 f3       	brcs	.-52     	; 0xdd8 <LCD_voidScrollPattern30+0xd8>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     e0c:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     e16:	ce 01       	movw	r24, r28
     e18:	0e 96       	adiw	r24, 0x0e	; 14
     e1a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     e1e:	2f ef       	ldi	r18, 0xFF	; 255
     e20:	85 ea       	ldi	r24, 0xA5	; 165
     e22:	9e e0       	ldi	r25, 0x0E	; 14
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	80 40       	sbci	r24, 0x00	; 0
     e28:	90 40       	sbci	r25, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <LCD_voidScrollPattern30+0x124>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <LCD_voidScrollPattern30+0x12e>
     e2e:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     e30:	8f 2d       	mov	r24, r15
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	b8 01       	movw	r22, r16
     e38:	77 27       	eor	r23, r23
     e3a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     e3e:	f8 2e       	mov	r15, r24
	}
     e40:	c9 cf       	rjmp	.-110    	; 0xdd4 <LCD_voidScrollPattern30+0xd4>

00000e42 <LCD_voidScrollPattern25>:
}


void LCD_voidScrollPattern25(u8 freq10){
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	a0 97       	sbiw	r28, 0x20	; 32
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
	
	
	
	char pattern[] = "--|______|";
     e56:	9b e0       	ldi	r25, 0x0B	; 11
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	9e 01       	movw	r18, r28
     e5e:	2f 5f       	subi	r18, 0xFF	; 255
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	d9 01       	movw	r26, r18
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	9a 95       	dec	r25
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <LCD_voidScrollPattern25+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     e6c:	f9 01       	movw	r30, r18
     e6e:	01 90       	ld	r0, Z+
     e70:	00 20       	and	r0, r0
     e72:	e9 f7       	brne	.-6      	; 0xe6e <LCD_voidScrollPattern25+0x2c>
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	8f 01       	movw	r16, r30
     e78:	02 1b       	sub	r16, r18
     e7a:	13 0b       	sbc	r17, r19
	u8 pos = 0;
    u8 time10=1000/freq10;
     e7c:	68 2f       	mov	r22, r24
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     e88:	e6 2e       	mov	r14, r22
    
    u8 Ton=(time10*1)/4;
     e8a:	9b 01       	movw	r18, r22
     e8c:	33 27       	eor	r19, r19
     e8e:	35 95       	asr	r19
     e90:	27 95       	ror	r18
     e92:	35 95       	asr	r19
     e94:	27 95       	ror	r18
     e96:	d2 2e       	mov	r13, r18
    u8 Toff=time10-Ton;
     e98:	f6 2e       	mov	r15, r22
     e9a:	f2 1a       	sub	r15, r18
LCD_voidGoToSpecificPosition(2,0);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString("Ton= ");
     ea4:	86 ed       	ldi	r24, 0xD6	; 214
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(Ton);
     eac:	6d 2d       	mov	r22, r13
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
     eb8:	89 ec       	ldi	r24, 0xC9	; 201
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidGoToSpecificPosition(2,9);
     ec0:	69 e0       	ldi	r22, 0x09	; 9
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString(" Toff= ");
     ec8:	8c ed       	ldi	r24, 0xDC	; 220
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(Toff);
     ed0:	6f 2d       	mov	r22, r15
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
     edc:	89 ec       	ldi	r24, 0xC9	; 201
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidGoToSpecificPosition(1,9);
     ee4:	69 e0       	ldi	r22, 0x09	; 9
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString("time = ");
     eec:	81 ec       	ldi	r24, 0xC1	; 193
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(time10);
     ef4:	6e 2d       	mov	r22, r14
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
     f00:	89 ec       	ldi	r24, 0xC9	; 201
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	
	char pattern[] = "--|______|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
     f08:	f1 2c       	mov	r15, r1
LCD_voidGoToSpecificPosition(1,9);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time10);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	18 c0       	rjmp	.+48     	; 0xf3e <LCD_voidScrollPattern25+0xfc>
			display[i] = pattern[(pos + i) % length];
     f0e:	24 2f       	mov	r18, r20
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	8f 0d       	add	r24, r15
     f16:	91 1d       	adc	r25, r1
     f18:	b8 01       	movw	r22, r16
     f1a:	77 27       	eor	r23, r23
     f1c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     f20:	e1 e0       	ldi	r30, 0x01	; 1
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	ec 0f       	add	r30, r28
     f26:	fd 1f       	adc	r31, r29
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	90 81       	ld	r25, Z
     f2e:	ec e0       	ldi	r30, 0x0C	; 12
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	ec 0f       	add	r30, r28
     f34:	fd 1f       	adc	r31, r29
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	90 83       	st	Z, r25
LCD_voidGoToSpecificPosition(1,9);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time10);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	44 31       	cpi	r20, 0x14	; 20
     f40:	30 f3       	brcs	.-52     	; 0xf0e <LCD_voidScrollPattern25+0xcc>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
     f42:	18 a2       	std	Y+32, r1	; 0x20

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
     f4c:	ce 01       	movw	r24, r28
     f4e:	0c 96       	adiw	r24, 0x0c	; 12
     f50:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
     f54:	2f ef       	ldi	r18, 0xFF	; 255
     f56:	85 ea       	ldi	r24, 0xA5	; 165
     f58:	9e e0       	ldi	r25, 0x0E	; 14
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	80 40       	sbci	r24, 0x00	; 0
     f5e:	90 40       	sbci	r25, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <LCD_voidScrollPattern25+0x118>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <LCD_voidScrollPattern25+0x122>
     f64:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
     f66:	8f 2d       	mov	r24, r15
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	b8 01       	movw	r22, r16
     f6e:	77 27       	eor	r23, r23
     f70:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     f74:	f8 2e       	mov	r15, r24
	}
     f76:	c9 cf       	rjmp	.-110    	; 0xf0a <LCD_voidScrollPattern25+0xc8>

00000f78 <LCD_voidScrollPattern20>:
	
	
}
void LCD_voidScrollPattern20  (u8 freq11){
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	a2 97       	sbiw	r28, 0x22	; 34
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "--|________|";
     f8c:	9d e0       	ldi	r25, 0x0D	; 13
     f8e:	ef e3       	ldi	r30, 0x3F	; 63
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	9e 01       	movw	r18, r28
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	d9 01       	movw	r26, r18
     f9a:	01 90       	ld	r0, Z+
     f9c:	0d 92       	st	X+, r0
     f9e:	9a 95       	dec	r25
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <LCD_voidScrollPattern20+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
     fa2:	f9 01       	movw	r30, r18
     fa4:	01 90       	ld	r0, Z+
     fa6:	00 20       	and	r0, r0
     fa8:	e9 f7       	brne	.-6      	; 0xfa4 <LCD_voidScrollPattern20+0x2c>
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	8f 01       	movw	r16, r30
     fae:	02 1b       	sub	r16, r18
     fb0:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time11=1000/freq11;
     fb2:	68 2f       	mov	r22, r24
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	88 ee       	ldi	r24, 0xE8	; 232
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     fbe:	9b 01       	movw	r18, r22
     fc0:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time11*2)/10;
     fc2:	cb 01       	movw	r24, r22
     fc4:	99 27       	eor	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	6a e0       	ldi	r22, 0x0A	; 10
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
     fd2:	d6 2e       	mov	r13, r22
	u8 Toff=time11-Ton;
     fd4:	f2 2e       	mov	r15, r18
     fd6:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
     fe0:	86 ed       	ldi	r24, 0xD6	; 214
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
     fe8:	6d 2d       	mov	r22, r13
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
     ff4:	89 ec       	ldi	r24, 0xC9	; 201
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
     ffc:	69 e0       	ldi	r22, 0x09	; 9
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
    1004:	8c ed       	ldi	r24, 0xDC	; 220
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
    100c:	6f 2d       	mov	r22, r15
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
    1018:	89 ec       	ldi	r24, 0xC9	; 201
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
    1020:	69 e0       	ldi	r22, 0x09	; 9
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
    1028:	81 ec       	ldi	r24, 0xC1	; 193
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time11);
    1030:	6e 2d       	mov	r22, r14
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
    103c:	89 ec       	ldi	r24, 0xC9	; 201
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
}
void LCD_voidScrollPattern20  (u8 freq11){
	char pattern[] = "--|________|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
    1044:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time11);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	18 c0       	rjmp	.+48     	; 0x107a <LCD_voidScrollPattern20+0x102>
			display[i] = pattern[(pos + i) % length];
    104a:	24 2f       	mov	r18, r20
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	c9 01       	movw	r24, r18
    1050:	8f 0d       	add	r24, r15
    1052:	91 1d       	adc	r25, r1
    1054:	b8 01       	movw	r22, r16
    1056:	77 27       	eor	r23, r23
    1058:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    105c:	e1 e0       	ldi	r30, 0x01	; 1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	ec 0f       	add	r30, r28
    1062:	fd 1f       	adc	r31, r29
    1064:	e8 0f       	add	r30, r24
    1066:	f9 1f       	adc	r31, r25
    1068:	90 81       	ld	r25, Z
    106a:	ee e0       	ldi	r30, 0x0E	; 14
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	ec 0f       	add	r30, r28
    1070:	fd 1f       	adc	r31, r29
    1072:	e2 0f       	add	r30, r18
    1074:	f3 1f       	adc	r31, r19
    1076:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time11);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	44 31       	cpi	r20, 0x14	; 20
    107c:	30 f3       	brcs	.-52     	; 0x104a <LCD_voidScrollPattern20+0xd2>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
    107e:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
    1088:	ce 01       	movw	r24, r28
    108a:	0e 96       	adiw	r24, 0x0e	; 14
    108c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	85 ea       	ldi	r24, 0xA5	; 165
    1094:	9e e0       	ldi	r25, 0x0E	; 14
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <LCD_voidScrollPattern20+0x11e>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <LCD_voidScrollPattern20+0x128>
    10a0:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
    10a2:	8f 2d       	mov	r24, r15
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	b8 01       	movw	r22, r16
    10aa:	77 27       	eor	r23, r23
    10ac:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    10b0:	f8 2e       	mov	r15, r24
	}
    10b2:	c9 cf       	rjmp	.-110    	; 0x1046 <LCD_voidScrollPattern20+0xce>

000010b4 <LCD_voidScrollPattern10>:
}
void LCD_voidScrollPattern10  (u8 freq12){
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	a2 97       	sbiw	r28, 0x22	; 34
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
	char pattern[] = "-|_________|";
    10c8:	9d e0       	ldi	r25, 0x0D	; 13
    10ca:	ec e4       	ldi	r30, 0x4C	; 76
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	9e 01       	movw	r18, r28
    10d0:	2f 5f       	subi	r18, 0xFF	; 255
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	d9 01       	movw	r26, r18
    10d6:	01 90       	ld	r0, Z+
    10d8:	0d 92       	st	X+, r0
    10da:	9a 95       	dec	r25
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <LCD_voidScrollPattern10+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
    10de:	f9 01       	movw	r30, r18
    10e0:	01 90       	ld	r0, Z+
    10e2:	00 20       	and	r0, r0
    10e4:	e9 f7       	brne	.-6      	; 0x10e0 <LCD_voidScrollPattern10+0x2c>
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	8f 01       	movw	r16, r30
    10ea:	02 1b       	sub	r16, r18
    10ec:	13 0b       	sbc	r17, r19
	u8 pos = 0;
	u8 time12=1000/freq12;
    10ee:	68 2f       	mov	r22, r24
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	88 ee       	ldi	r24, 0xE8	; 232
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    10fa:	9b 01       	movw	r18, r22
    10fc:	e6 2e       	mov	r14, r22
	
	u8 Ton=(time12*1)/10;
    10fe:	cb 01       	movw	r24, r22
    1100:	99 27       	eor	r25, r25
    1102:	6a e0       	ldi	r22, 0x0A	; 10
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    110a:	d6 2e       	mov	r13, r22
	u8 Toff=time12-Ton;
    110c:	f2 2e       	mov	r15, r18
    110e:	f6 1a       	sub	r15, r22
	LCD_voidGoToSpecificPosition(2,0);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("Ton= ");
    1118:	86 ed       	ldi	r24, 0xD6	; 214
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Ton);
    1120:	6d 2d       	mov	r22, r13
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
    112c:	89 ec       	ldi	r24, 0xC9	; 201
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(2,9);
    1134:	69 e0       	ldi	r22, 0x09	; 9
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString(" Toff= ");
    113c:	8c ed       	ldi	r24, 0xDC	; 220
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(Toff);
    1144:	6f 2d       	mov	r22, r15
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
    1150:	89 ec       	ldi	r24, 0xC9	; 201
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,9);
    1158:	69 e0       	ldi	r22, 0x09	; 9
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString("time = ");
    1160:	81 ec       	ldi	r24, 0xC1	; 193
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	LCD_voidDisplayNumber(time12);
    1168:	6e 2d       	mov	r22, r14
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
	LCD_voidDisplayString("ms");
    1174:	89 ec       	ldi	r24, 0xC9	; 201
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
}
void LCD_voidScrollPattern10  (u8 freq12){
	char pattern[] = "-|_________|";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
    117c:	f1 2c       	mov	r15, r1
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time12);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	18 c0       	rjmp	.+48     	; 0x11b2 <LCD_voidScrollPattern10+0xfe>
			display[i] = pattern[(pos + i) % length];
    1182:	24 2f       	mov	r18, r20
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	c9 01       	movw	r24, r18
    1188:	8f 0d       	add	r24, r15
    118a:	91 1d       	adc	r25, r1
    118c:	b8 01       	movw	r22, r16
    118e:	77 27       	eor	r23, r23
    1190:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    1194:	e1 e0       	ldi	r30, 0x01	; 1
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	ec 0f       	add	r30, r28
    119a:	fd 1f       	adc	r31, r29
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	90 81       	ld	r25, Z
    11a2:	ee e0       	ldi	r30, 0x0E	; 14
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	ec 0f       	add	r30, r28
    11a8:	fd 1f       	adc	r31, r29
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	90 83       	st	Z, r25
	LCD_voidGoToSpecificPosition(1,9);
	LCD_voidDisplayString("time = ");
	LCD_voidDisplayNumber(time12);
	LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    11b0:	4f 5f       	subi	r20, 0xFF	; 255
    11b2:	44 31       	cpi	r20, 0x14	; 20
    11b4:	30 f3       	brcs	.-52     	; 0x1182 <LCD_voidScrollPattern10+0xce>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
    11b6:	1a a2       	std	Y+34, r1	; 0x22

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 96       	adiw	r24, 0x0e	; 14
    11c4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
    11c8:	2f ef       	ldi	r18, 0xFF	; 255
    11ca:	85 ea       	ldi	r24, 0xA5	; 165
    11cc:	9e e0       	ldi	r25, 0x0E	; 14
    11ce:	21 50       	subi	r18, 0x01	; 1
    11d0:	80 40       	sbci	r24, 0x00	; 0
    11d2:	90 40       	sbci	r25, 0x00	; 0
    11d4:	e1 f7       	brne	.-8      	; 0x11ce <LCD_voidScrollPattern10+0x11a>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <LCD_voidScrollPattern10+0x124>
    11d8:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
    11da:	8f 2d       	mov	r24, r15
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	b8 01       	movw	r22, r16
    11e2:	77 27       	eor	r23, r23
    11e4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    11e8:	f8 2e       	mov	r15, r24
	}
    11ea:	c9 cf       	rjmp	.-110    	; 0x117e <LCD_voidScrollPattern10+0xca>

000011ec <LCD_voidScrollPattern0>:
	
}

void LCD_voidScrollPattern0(u8 freq13){
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	6e 97       	sbiw	r28, 0x1e	; 30
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
	
	
	
	char pattern[] = "________";
    1200:	99 e0       	ldi	r25, 0x09	; 9
    1202:	e9 e5       	ldi	r30, 0x59	; 89
    1204:	f1 e0       	ldi	r31, 0x01	; 1
    1206:	9e 01       	movw	r18, r28
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	d9 01       	movw	r26, r18
    120e:	01 90       	ld	r0, Z+
    1210:	0d 92       	st	X+, r0
    1212:	9a 95       	dec	r25
    1214:	e1 f7       	brne	.-8      	; 0x120e <LCD_voidScrollPattern0+0x22>
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
    1216:	f9 01       	movw	r30, r18
    1218:	01 90       	ld	r0, Z+
    121a:	00 20       	and	r0, r0
    121c:	e9 f7       	brne	.-6      	; 0x1218 <LCD_voidScrollPattern0+0x2c>
    121e:	31 97       	sbiw	r30, 0x01	; 1
    1220:	8f 01       	movw	r16, r30
    1222:	02 1b       	sub	r16, r18
    1224:	13 0b       	sbc	r17, r19
	u8 pos = 0;
u8 time13=1000/freq13;
    1226:	68 2f       	mov	r22, r24
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	88 ee       	ldi	r24, 0xE8	; 232
    122c:	93 e0       	ldi	r25, 0x03	; 3
    122e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    1232:	f6 2e       	mov	r15, r22
LCD_voidGoToSpecificPosition(2,0);
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString("time = ");
    123c:	81 ec       	ldi	r24, 0xC1	; 193
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
LCD_voidDisplayNumber(time13);
    1244:	6f 2d       	mov	r22, r15
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
LCD_voidDisplayString("ms");
    1250:	89 ec       	ldi	r24, 0xC9	; 201
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
	
	
	char pattern[] = "________";
	char display[21]; // Buffer to hold the current display string (for 20x4 LCD)
	u8 length = strlen(pattern);
	u8 pos = 0;
    1258:	f1 2c       	mov	r15, r1
LCD_voidGoToSpecificPosition(2,0);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time13);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	18 c0       	rjmp	.+48     	; 0x128e <LCD_voidScrollPattern0+0xa2>
			display[i] = pattern[(pos + i) % length];
    125e:	24 2f       	mov	r18, r20
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	c9 01       	movw	r24, r18
    1264:	8f 0d       	add	r24, r15
    1266:	91 1d       	adc	r25, r1
    1268:	b8 01       	movw	r22, r16
    126a:	77 27       	eor	r23, r23
    126c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    1270:	e1 e0       	ldi	r30, 0x01	; 1
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ec 0f       	add	r30, r28
    1276:	fd 1f       	adc	r31, r29
    1278:	e8 0f       	add	r30, r24
    127a:	f9 1f       	adc	r31, r25
    127c:	90 81       	ld	r25, Z
    127e:	ea e0       	ldi	r30, 0x0A	; 10
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	ec 0f       	add	r30, r28
    1284:	fd 1f       	adc	r31, r29
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	90 83       	st	Z, r25
LCD_voidGoToSpecificPosition(2,0);
LCD_voidDisplayString("time = ");
LCD_voidDisplayNumber(time13);
LCD_voidDisplayString("ms");
	while (1) {
		for (u8 i = 0; i < 20; i++) {
    128c:	4f 5f       	subi	r20, 0xFF	; 255
    128e:	44 31       	cpi	r20, 0x14	; 20
    1290:	30 f3       	brcs	.-52     	; 0x125e <LCD_voidScrollPattern0+0x72>
			display[i] = pattern[(pos + i) % length];
		}
		display[20] = '\0'; // Null-terminate the string
    1292:	1e 8e       	std	Y+30, r1	; 0x1e

		LCD_voidGoToSpecificPosition(3, 0); // Set cursor to the first line
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString(display); // Display the current pattern
    129c:	ce 01       	movw	r24, r28
    129e:	0a 96       	adiw	r24, 0x0a	; 10
    12a0:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	85 ea       	ldi	r24, 0xA5	; 165
    12a8:	9e e0       	ldi	r25, 0x0E	; 14
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	80 40       	sbci	r24, 0x00	; 0
    12ae:	90 40       	sbci	r25, 0x00	; 0
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <LCD_voidScrollPattern0+0xbe>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <LCD_voidScrollPattern0+0xc8>
    12b4:	00 00       	nop
		_delay_ms(300); // Delay for visible scrolling effect

		pos = (pos + 1) % length; // Increment position
    12b6:	8f 2d       	mov	r24, r15
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	b8 01       	movw	r22, r16
    12be:	77 27       	eor	r23, r23
    12c0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divmodhi4>
    12c4:	f8 2e       	mov	r15, r24
	}
    12c6:	c9 cf       	rjmp	.-110    	; 0x125a <LCD_voidScrollPattern0+0x6e>

000012c8 <PWM_DRAWER_voidDISPLAY>:
	
	
}

void PWM_DRAWER_voidDISPLAY(u8 frequency,u8 dutyy){
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	cf 93       	push	r28
    12d2:	c6 2e       	mov	r12, r22
	

	
	switch(dutyy){
    12d4:	46 2f       	mov	r20, r22
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	45 36       	cpi	r20, 0x65	; 101
    12da:	51 05       	cpc	r21, r1
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <PWM_DRAWER_voidDISPLAY+0x18>
    12de:	53 c3       	rjmp	.+1702   	; 0x1986 <PWM_DRAWER_voidDISPLAY+0x6be>
    12e0:	c8 2f       	mov	r28, r24
    12e2:	fa 01       	movw	r30, r20
    12e4:	e6 5d       	subi	r30, 0xD6	; 214
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__tablejump2__>
		
		case 100:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	65 e0       	ldi	r22, 0x05	; 5
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    12f6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    12fa:	d1 2c       	mov	r13, r1
    12fc:	e1 2c       	mov	r14, r1
    12fe:	f1 2c       	mov	r15, r1
    1300:	c7 01       	movw	r24, r14
    1302:	b6 01       	movw	r22, r12
    1304:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1308:	ab 01       	movw	r20, r22
    130a:	bc 01       	movw	r22, r24
    130c:	8c 2f       	mov	r24, r28
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1314:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    1318:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    1324:	82 e6       	ldi	r24, 0x62	; 98
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    132c:	6c 2f       	mov	r22, r28
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    1338:	88 e6       	ldi	r24, 0x68	; 104
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    1348:	8b e6       	ldi	r24, 0x6B	; 107
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1350:	c7 01       	movw	r24, r14
    1352:	b6 01       	movw	r22, r12
    1354:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    1358:	81 e7       	ldi	r24, 0x71	; 113
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern100(frequency);
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_voidScrollPattern100>
		
		
		
		break;
		case 90:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	65 e0       	ldi	r22, 0x05	; 5
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1378:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    137c:	d1 2c       	mov	r13, r1
    137e:	e1 2c       	mov	r14, r1
    1380:	f1 2c       	mov	r15, r1
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    138a:	ab 01       	movw	r20, r22
    138c:	bc 01       	movw	r22, r24
    138e:	8c 2f       	mov	r24, r28
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1396:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    139a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    13a6:	82 e6       	ldi	r24, 0x62	; 98
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    13ae:	6c 2f       	mov	r22, r28
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    13ba:	88 e6       	ldi	r24, 0x68	; 104
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    13ca:	8b e6       	ldi	r24, 0x6B	; 107
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    13d2:	c7 01       	movw	r24, r14
    13d4:	b6 01       	movw	r22, r12
    13d6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    13da:	81 e7       	ldi	r24, 0x71	; 113
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern90(frequency);
    13ea:	8c 2f       	mov	r24, r28
    13ec:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidScrollPattern90>
		
		break;
		
		case 80:
		
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	65 e0       	ldi	r22, 0x05	; 5
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    13fa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    13fe:	d1 2c       	mov	r13, r1
    1400:	e1 2c       	mov	r14, r1
    1402:	f1 2c       	mov	r15, r1
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    140c:	ab 01       	movw	r20, r22
    140e:	bc 01       	movw	r22, r24
    1410:	8c 2f       	mov	r24, r28
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1418:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    141c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    1428:	82 e6       	ldi	r24, 0x62	; 98
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    1430:	6c 2f       	mov	r22, r28
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    143c:	88 e6       	ldi	r24, 0x68	; 104
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    144c:	8b e6       	ldi	r24, 0x6B	; 107
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    145c:	81 e7       	ldi	r24, 0x71	; 113
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern80(frequency);
    146c:	8c 2f       	mov	r24, r28
    146e:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_voidScrollPattern80>
		
		break;
		case 75:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	65 e0       	ldi	r22, 0x05	; 5
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    147c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1480:	d1 2c       	mov	r13, r1
    1482:	e1 2c       	mov	r14, r1
    1484:	f1 2c       	mov	r15, r1
    1486:	c7 01       	movw	r24, r14
    1488:	b6 01       	movw	r22, r12
    148a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    148e:	ab 01       	movw	r20, r22
    1490:	bc 01       	movw	r22, r24
    1492:	8c 2f       	mov	r24, r28
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    149a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    149e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    14aa:	82 e6       	ldi	r24, 0x62	; 98
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    14b2:	6c 2f       	mov	r22, r28
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    14be:	88 e6       	ldi	r24, 0x68	; 104
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    14ce:	8b e6       	ldi	r24, 0x6B	; 107
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    14d6:	c7 01       	movw	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    14de:	81 e7       	ldi	r24, 0x71	; 113
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern75(frequency);
    14ee:	8c 2f       	mov	r24, r28
    14f0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_voidScrollPattern75>
		
	
		break;
		
		case 70:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	65 e0       	ldi	r22, 0x05	; 5
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    14fe:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1502:	d1 2c       	mov	r13, r1
    1504:	e1 2c       	mov	r14, r1
    1506:	f1 2c       	mov	r15, r1
    1508:	c7 01       	movw	r24, r14
    150a:	b6 01       	movw	r22, r12
    150c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1510:	ab 01       	movw	r20, r22
    1512:	bc 01       	movw	r22, r24
    1514:	8c 2f       	mov	r24, r28
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    151c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    1520:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    152c:	82 e6       	ldi	r24, 0x62	; 98
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    1534:	6c 2f       	mov	r22, r28
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    1540:	88 e6       	ldi	r24, 0x68	; 104
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    1550:	8b e6       	ldi	r24, 0x6B	; 107
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1558:	c7 01       	movw	r24, r14
    155a:	b6 01       	movw	r22, r12
    155c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    1560:	81 e7       	ldi	r24, 0x71	; 113
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern70(frequency);
    1570:	8c 2f       	mov	r24, r28
    1572:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_voidScrollPattern70>
		
		break;
		
		
		case 60:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	65 e0       	ldi	r22, 0x05	; 5
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1580:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1584:	d1 2c       	mov	r13, r1
    1586:	e1 2c       	mov	r14, r1
    1588:	f1 2c       	mov	r15, r1
    158a:	c7 01       	movw	r24, r14
    158c:	b6 01       	movw	r22, r12
    158e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1592:	ab 01       	movw	r20, r22
    1594:	bc 01       	movw	r22, r24
    1596:	8c 2f       	mov	r24, r28
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    159e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    15a2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    15ae:	82 e6       	ldi	r24, 0x62	; 98
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    15b6:	6c 2f       	mov	r22, r28
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    15c2:	88 e6       	ldi	r24, 0x68	; 104
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    15d2:	8b e6       	ldi	r24, 0x6B	; 107
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    15da:	c7 01       	movw	r24, r14
    15dc:	b6 01       	movw	r22, r12
    15de:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    15e2:	81 e7       	ldi	r24, 0x71	; 113
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern60(frequency);
    15f2:	8c 2f       	mov	r24, r28
    15f4:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_voidScrollPattern60>
		
		break;
		
		
		case 50:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	65 e0       	ldi	r22, 0x05	; 5
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1602:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1606:	d1 2c       	mov	r13, r1
    1608:	e1 2c       	mov	r14, r1
    160a:	f1 2c       	mov	r15, r1
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1614:	ab 01       	movw	r20, r22
    1616:	bc 01       	movw	r22, r24
    1618:	8c 2f       	mov	r24, r28
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1620:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    1624:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    1630:	82 e6       	ldi	r24, 0x62	; 98
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    1638:	6c 2f       	mov	r22, r28
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    1644:	88 e6       	ldi	r24, 0x68	; 104
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    1654:	8b e6       	ldi	r24, 0x6B	; 107
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    1664:	81 e7       	ldi	r24, 0x71	; 113
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		
		
		
		LCD_voidScrollPattern50(frequency);
    1674:	8c 2f       	mov	r24, r28
    1676:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LCD_voidScrollPattern50>
		break;
		
		case 40:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1684:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1688:	d1 2c       	mov	r13, r1
    168a:	e1 2c       	mov	r14, r1
    168c:	f1 2c       	mov	r15, r1
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1696:	ab 01       	movw	r20, r22
    1698:	bc 01       	movw	r22, r24
    169a:	8c 2f       	mov	r24, r28
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    16a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    16a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    16b2:	82 e6       	ldi	r24, 0x62	; 98
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    16ba:	6c 2f       	mov	r22, r28
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    16c6:	88 e6       	ldi	r24, 0x68	; 104
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    16d6:	8b e6       	ldi	r24, 0x6B	; 107
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    16de:	c7 01       	movw	r24, r14
    16e0:	b6 01       	movw	r22, r12
    16e2:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    16e6:	81 e7       	ldi	r24, 0x71	; 113
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern40(frequency);
    16f6:	8c 2f       	mov	r24, r28
    16f8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <LCD_voidScrollPattern40>
		
		break;
		case 30:
		
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	65 e0       	ldi	r22, 0x05	; 5
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1706:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    170a:	d1 2c       	mov	r13, r1
    170c:	e1 2c       	mov	r14, r1
    170e:	f1 2c       	mov	r15, r1
    1710:	c7 01       	movw	r24, r14
    1712:	b6 01       	movw	r22, r12
    1714:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1718:	ab 01       	movw	r20, r22
    171a:	bc 01       	movw	r22, r24
    171c:	8c 2f       	mov	r24, r28
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1724:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    1728:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    1734:	82 e6       	ldi	r24, 0x62	; 98
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    173c:	6c 2f       	mov	r22, r28
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    1748:	88 e6       	ldi	r24, 0x68	; 104
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    1758:	8b e6       	ldi	r24, 0x6B	; 107
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1760:	c7 01       	movw	r24, r14
    1762:	b6 01       	movw	r22, r12
    1764:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    1768:	81 e7       	ldi	r24, 0x71	; 113
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern30(frequency);
    1778:	8c 2f       	mov	r24, r28
    177a:	0e 94 80 06 	call	0xd00	; 0xd00 <LCD_voidScrollPattern30>
		
		break;
		
		case 25:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	65 e0       	ldi	r22, 0x05	; 5
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    1788:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    178c:	d1 2c       	mov	r13, r1
    178e:	e1 2c       	mov	r14, r1
    1790:	f1 2c       	mov	r15, r1
    1792:	c7 01       	movw	r24, r14
    1794:	b6 01       	movw	r22, r12
    1796:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    179a:	ab 01       	movw	r20, r22
    179c:	bc 01       	movw	r22, r24
    179e:	8c 2f       	mov	r24, r28
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    17a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    17aa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    17b6:	82 e6       	ldi	r24, 0x62	; 98
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    17be:	6c 2f       	mov	r22, r28
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    17ca:	88 e6       	ldi	r24, 0x68	; 104
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    17da:	8b e6       	ldi	r24, 0x6B	; 107
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    17e2:	c7 01       	movw	r24, r14
    17e4:	b6 01       	movw	r22, r12
    17e6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    17ea:	81 e7       	ldi	r24, 0x71	; 113
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern25(frequency);
    17fa:	8c 2f       	mov	r24, r28
    17fc:	0e 94 21 07 	call	0xe42	; 0xe42 <LCD_voidScrollPattern25>
		
	
		break;
		
		case 20:
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	65 e0       	ldi	r22, 0x05	; 5
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    180a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    180e:	d1 2c       	mov	r13, r1
    1810:	e1 2c       	mov	r14, r1
    1812:	f1 2c       	mov	r15, r1
    1814:	c7 01       	movw	r24, r14
    1816:	b6 01       	movw	r22, r12
    1818:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    181c:	ab 01       	movw	r20, r22
    181e:	bc 01       	movw	r22, r24
    1820:	8c 2f       	mov	r24, r28
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    1828:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    182c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    1838:	82 e6       	ldi	r24, 0x62	; 98
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    1840:	6c 2f       	mov	r22, r28
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    184c:	88 e6       	ldi	r24, 0x68	; 104
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    185c:	8b e6       	ldi	r24, 0x6B	; 107
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1864:	c7 01       	movw	r24, r14
    1866:	b6 01       	movw	r22, r12
    1868:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    186c:	81 e7       	ldi	r24, 0x71	; 113
    186e:	91 e0       	ldi	r25, 0x01	; 1
    1870:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern20(frequency);
    187c:	8c 2f       	mov	r24, r28
    187e:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_voidScrollPattern20>
		break;
		
		
		case 10:
		
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	65 e0       	ldi	r22, 0x05	; 5
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    188c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1890:	d1 2c       	mov	r13, r1
    1892:	e1 2c       	mov	r14, r1
    1894:	f1 2c       	mov	r15, r1
    1896:	c7 01       	movw	r24, r14
    1898:	b6 01       	movw	r22, r12
    189a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    189e:	ab 01       	movw	r20, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	8c 2f       	mov	r24, r28
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    18aa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    18ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    18ba:	82 e6       	ldi	r24, 0x62	; 98
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    18c2:	6c 2f       	mov	r22, r28
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    18ce:	88 e6       	ldi	r24, 0x68	; 104
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    18de:	8b e6       	ldi	r24, 0x6B	; 107
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    18e6:	c7 01       	movw	r24, r14
    18e8:	b6 01       	movw	r22, r12
    18ea:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    18ee:	81 e7       	ldi	r24, 0x71	; 113
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern10(frequency);
    18fe:	8c 2f       	mov	r24, r28
    1900:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <LCD_voidScrollPattern10>
		
		break;
		
		case 0:
		
		DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT); // OC1A
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	65 e0       	ldi	r22, 0x05	; 5
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <DIO_voidSetPinDirection>
		PWM_voidInitChannel_1A();
    190e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <PWM_voidInitChannel_1A>
		PWM_voidGenerate_PWM_Channel_1A(frequency,dutyy); //0
    1912:	d1 2c       	mov	r13, r1
    1914:	e1 2c       	mov	r14, r1
    1916:	f1 2c       	mov	r15, r1
    1918:	c7 01       	movw	r24, r14
    191a:	b6 01       	movw	r22, r12
    191c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1920:	ab 01       	movw	r20, r22
    1922:	bc 01       	movw	r22, r24
    1924:	8c 2f       	mov	r24, r28
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <PWM_voidGenerate_PWM_Channel_1A>
		
		
		LCD_voidInit();
    192c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_voidInit>

		// Clear the display
		LCD_voidClear();
    1930:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_voidClear>
		
		
		LCD_voidGoToSpecificPosition(0,0);
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("freq=");
    193c:	82 e6       	ldi	r24, 0x62	; 98
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(frequency);
    1944:	6c 2f       	mov	r22, r28
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("HZ");
    1950:	88 e6       	ldi	r24, 0x68	; 104
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(1,0);
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString("duty=");
    1960:	8b e6       	ldi	r24, 0x6B	; 107
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidDisplayNumber(dutyy);
    1968:	c7 01       	movw	r24, r14
    196a:	b6 01       	movw	r22, r12
    196c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_voidDisplayNumber>
		LCD_voidDisplayString("%");
    1970:	81 e7       	ldi	r24, 0x71	; 113
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(3,0);
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	0e 94 42 01 	call	0x284	; 0x284 <LCD_voidGoToSpecificPosition>
		LCD_voidScrollPattern0(frequency);
    1980:	8c 2f       	mov	r24, r28
    1982:	0e 94 f6 08 	call	0x11ec	; 0x11ec <LCD_voidScrollPattern0>
	
	
	
	
	
}
    1986:	cf 91       	pop	r28
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	08 95       	ret

00001992 <main>:
	and any frequency  */
	
	
	
	
	PWM_DRAWER_voidStart();
    1992:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PWM_DRAWER_voidStart>
    PWM_DRAWER_voidDISPLAY(50,75);
    1996:	6b e4       	ldi	r22, 0x4B	; 75
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	82 e3       	ldi	r24, 0x32	; 50
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <PWM_DRAWER_voidDISPLAY>
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <main+0x10>

000019a4 <DIO_voidSetPinDirection>:
#include "DIO_register.h"


void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	switch (copy_u8PortId)
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	19 f1       	breq	.+70     	; 0x19ee <DIO_voidSetPinDirection+0x4a>
    19a8:	30 f0       	brcs	.+12     	; 0x19b6 <DIO_voidSetPinDirection+0x12>
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	e1 f1       	breq	.+120    	; 0x1a26 <DIO_voidSetPinDirection+0x82>
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <DIO_voidSetPinDirection+0x10>
    19b2:	55 c0       	rjmp	.+170    	; 0x1a5e <DIO_voidSetPinDirection+0xba>
    19b4:	08 95       	ret
	{
	case DIO_PORTA:
	switch(copy_u8PinDirection)
    19b6:	44 23       	and	r20, r20
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <DIO_voidSetPinDirection+0x1c>
    19ba:	41 30       	cpi	r20, 0x01	; 1
    19bc:	69 f0       	breq	.+26     	; 0x19d8 <DIO_voidSetPinDirection+0x34>
    19be:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		CLR_BIT(DDRA_REG, copy_u8PinId);
    19c0:	2a b3       	in	r18, 0x1a	; 26
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_voidSetPinDirection+0x28>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	6a 95       	dec	r22
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_voidSetPinDirection+0x24>
    19d0:	80 95       	com	r24
    19d2:	82 23       	and	r24, r18
    19d4:	8a bb       	out	0x1a, r24	; 26
		break;
    19d6:	08 95       	ret
		
		case DIO_PIN_OUTPUT:
		SET_BIT(DDRA_REG, copy_u8PinId);
    19d8:	2a b3       	in	r18, 0x1a	; 26
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_voidSetPinDirection+0x40>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	6a 95       	dec	r22
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_voidSetPinDirection+0x3c>
    19e8:	82 2b       	or	r24, r18
    19ea:	8a bb       	out	0x1a, r24	; 26
		break;
    19ec:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
	switch(copy_u8PinDirection)
    19ee:	44 23       	and	r20, r20
    19f0:	19 f0       	breq	.+6      	; 0x19f8 <DIO_voidSetPinDirection+0x54>
    19f2:	41 30       	cpi	r20, 0x01	; 1
    19f4:	69 f0       	breq	.+26     	; 0x1a10 <DIO_voidSetPinDirection+0x6c>
    19f6:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		CLR_BIT(DDRB_REG, copy_u8PinId);
    19f8:	27 b3       	in	r18, 0x17	; 23
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_voidSetPinDirection+0x60>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	6a 95       	dec	r22
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_voidSetPinDirection+0x5c>
    1a08:	80 95       	com	r24
    1a0a:	82 23       	and	r24, r18
    1a0c:	87 bb       	out	0x17, r24	; 23
		break;
    1a0e:	08 95       	ret
		
		case DIO_PIN_OUTPUT:
		SET_BIT(DDRB_REG, copy_u8PinId);
    1a10:	27 b3       	in	r18, 0x17	; 23
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_voidSetPinDirection+0x78>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	6a 95       	dec	r22
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_voidSetPinDirection+0x74>
    1a20:	82 2b       	or	r24, r18
    1a22:	87 bb       	out	0x17, r24	; 23
		break;
    1a24:	08 95       	ret
	}
	break;
	
	case DIO_PORTC:
	switch(copy_u8PinDirection)
    1a26:	44 23       	and	r20, r20
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <DIO_voidSetPinDirection+0x8c>
    1a2a:	41 30       	cpi	r20, 0x01	; 1
    1a2c:	69 f0       	breq	.+26     	; 0x1a48 <DIO_voidSetPinDirection+0xa4>
    1a2e:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		CLR_BIT(DDRC_REG, copy_u8PinId);
    1a30:	24 b3       	in	r18, 0x14	; 20
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_voidSetPinDirection+0x98>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	6a 95       	dec	r22
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_voidSetPinDirection+0x94>
    1a40:	80 95       	com	r24
    1a42:	82 23       	and	r24, r18
    1a44:	84 bb       	out	0x14, r24	; 20
		break;
    1a46:	08 95       	ret
		
		case DIO_PIN_OUTPUT:
		SET_BIT(DDRC_REG, copy_u8PinId);
    1a48:	24 b3       	in	r18, 0x14	; 20
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_voidSetPinDirection+0xb0>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	6a 95       	dec	r22
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_voidSetPinDirection+0xac>
    1a58:	82 2b       	or	r24, r18
    1a5a:	84 bb       	out	0x14, r24	; 20
		break;
    1a5c:	08 95       	ret
	}
	break;
	
	case DIO_PORTD:
	switch(copy_u8PinDirection)
    1a5e:	44 23       	and	r20, r20
    1a60:	19 f0       	breq	.+6      	; 0x1a68 <DIO_voidSetPinDirection+0xc4>
    1a62:	41 30       	cpi	r20, 0x01	; 1
    1a64:	69 f0       	breq	.+26     	; 0x1a80 <DIO_voidSetPinDirection+0xdc>
    1a66:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		CLR_BIT(DDRD_REG, copy_u8PinId);
    1a68:	21 b3       	in	r18, 0x11	; 17
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_voidSetPinDirection+0xd0>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	6a 95       	dec	r22
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_voidSetPinDirection+0xcc>
    1a78:	80 95       	com	r24
    1a7a:	82 23       	and	r24, r18
    1a7c:	81 bb       	out	0x11, r24	; 17
		break;
    1a7e:	08 95       	ret
		
		case DIO_PIN_OUTPUT:
		SET_BIT(DDRD_REG, copy_u8PinId);
    1a80:	21 b3       	in	r18, 0x11	; 17
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <DIO_voidSetPinDirection+0xe8>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	6a 95       	dec	r22
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <DIO_voidSetPinDirection+0xe4>
    1a90:	82 2b       	or	r24, r18
    1a92:	81 bb       	out	0x11, r24	; 17
    1a94:	08 95       	ret

00001a96 <PWM_voidInitChannel_1A>:
}


void PWM_voidInitChannel_1A(void)
{
	CLR_BIT(TCCR1A_REG, WGM10);
    1a96:	8f b5       	in	r24, 0x2f	; 47
    1a98:	8e 7f       	andi	r24, 0xFE	; 254
    1a9a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A_REG, WGM11);
    1a9c:	8f b5       	in	r24, 0x2f	; 47
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B_REG, WGM12);
    1aa2:	8e b5       	in	r24, 0x2e	; 46
    1aa4:	88 60       	ori	r24, 0x08	; 8
    1aa6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM13);
    1aa8:	8e b5       	in	r24, 0x2e	; 46
    1aaa:	80 61       	ori	r24, 0x10	; 16
    1aac:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A_REG, COM1A0);
    1aae:	8f b5       	in	r24, 0x2f	; 47
    1ab0:	8f 7b       	andi	r24, 0xBF	; 191
    1ab2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A_REG, COM1A1);
    1ab4:	8f b5       	in	r24, 0x2f	; 47
    1ab6:	80 68       	ori	r24, 0x80	; 128
    1ab8:	8f bd       	out	0x2f, r24	; 47
    1aba:	08 95       	ret

00001abc <PWM_voidGenerate_PWM_Channel_1A>:
}


void PWM_voidGenerate_PWM_Channel_1A(u16 copy_u16Frequency_hz, f32 copy_f32DutyCycle)
{
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	ec 01       	movw	r28, r24
    1aca:	6a 01       	movw	r12, r20
    1acc:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100.0)
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	48 ec       	ldi	r20, 0xC8	; 200
    1ad4:	52 e4       	ldi	r21, 0x42	; 66
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	b6 01       	movw	r22, r12
    1ada:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__cmpsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	94 f1       	brlt	.+100    	; 0x1b46 <PWM_voidGenerate_PWM_Channel_1A+0x8a>
	{
		// under condition tick time 4 MS by setting prescaller 64
		ICR1_u16_REG = ((1000000UL/copy_u16Frequency_hz)/4)-1;
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	60 e9       	ldi	r22, 0x90	; 144
    1aea:	70 ed       	ldi	r23, 0xD0	; 208
    1aec:	83 e0       	ldi	r24, 0x03	; 3
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__udivmodsi4>
    1af4:	21 50       	subi	r18, 0x01	; 1
    1af6:	31 09       	sbc	r19, r1
    1af8:	37 bd       	out	0x27, r19	; 39
    1afa:	26 bd       	out	0x26, r18	; 38
		
		OCR1A_u16_REG = ((copy_f32DutyCycle*(ICR1_u16_REG+1))/100)-1;
    1afc:	66 b5       	in	r22, 0x26	; 38
    1afe:	77 b5       	in	r23, 0x27	; 39
    1b00:	6f 5f       	subi	r22, 0xFF	; 255
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__floatunsisf>
    1b0c:	a7 01       	movw	r20, r14
    1b0e:	96 01       	movw	r18, r12
    1b10:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	48 ec       	ldi	r20, 0xC8	; 200
    1b1a:	52 e4       	ldi	r21, 0x42	; 66
    1b1c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__divsf3>
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__subsf3>
    1b2c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__fixunssfsi>
    1b30:	7b bd       	out	0x2b, r23	; 43
    1b32:	6a bd       	out	0x2a, r22	; 42
		
		// select prescaller 64
		SET_BIT(TCCR1B_REG, CS10);
    1b34:	8e b5       	in	r24, 0x2e	; 46
    1b36:	81 60       	ori	r24, 0x01	; 1
    1b38:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG, CS11);
    1b3a:	8e b5       	in	r24, 0x2e	; 46
    1b3c:	82 60       	ori	r24, 0x02	; 2
    1b3e:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG, CS12);
    1b40:	8e b5       	in	r24, 0x2e	; 46
    1b42:	8b 7f       	andi	r24, 0xFB	; 251
    1b44:	8e bd       	out	0x2e, r24	; 46
	}
	else
	{
		//return Error State
	}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	08 95       	ret

00001b54 <__subsf3>:
    1b54:	50 58       	subi	r21, 0x80	; 128

00001b56 <__addsf3>:
    1b56:	bb 27       	eor	r27, r27
    1b58:	aa 27       	eor	r26, r26
    1b5a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3x>
    1b5e:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_round>
    1b62:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscA>
    1b66:	38 f0       	brcs	.+14     	; 0x1b76 <__addsf3+0x20>
    1b68:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fp_pscB>
    1b6c:	20 f0       	brcs	.+8      	; 0x1b76 <__addsf3+0x20>
    1b6e:	39 f4       	brne	.+14     	; 0x1b7e <__addsf3+0x28>
    1b70:	9f 3f       	cpi	r25, 0xFF	; 255
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <__addsf3+0x24>
    1b74:	26 f4       	brtc	.+8      	; 0x1b7e <__addsf3+0x28>
    1b76:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_nan>
    1b7a:	0e f4       	brtc	.+2      	; 0x1b7e <__addsf3+0x28>
    1b7c:	e0 95       	com	r30
    1b7e:	e7 fb       	bst	r30, 7
    1b80:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>

00001b84 <__addsf3x>:
    1b84:	e9 2f       	mov	r30, r25
    1b86:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fp_split3>
    1b8a:	58 f3       	brcs	.-42     	; 0x1b62 <__addsf3+0xc>
    1b8c:	ba 17       	cp	r27, r26
    1b8e:	62 07       	cpc	r22, r18
    1b90:	73 07       	cpc	r23, r19
    1b92:	84 07       	cpc	r24, r20
    1b94:	95 07       	cpc	r25, r21
    1b96:	20 f0       	brcs	.+8      	; 0x1ba0 <__addsf3x+0x1c>
    1b98:	79 f4       	brne	.+30     	; 0x1bb8 <__addsf3x+0x34>
    1b9a:	a6 f5       	brtc	.+104    	; 0x1c04 <__addsf3x+0x80>
    1b9c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_zero>
    1ba0:	0e f4       	brtc	.+2      	; 0x1ba4 <__addsf3x+0x20>
    1ba2:	e0 95       	com	r30
    1ba4:	0b 2e       	mov	r0, r27
    1ba6:	ba 2f       	mov	r27, r26
    1ba8:	a0 2d       	mov	r26, r0
    1baa:	0b 01       	movw	r0, r22
    1bac:	b9 01       	movw	r22, r18
    1bae:	90 01       	movw	r18, r0
    1bb0:	0c 01       	movw	r0, r24
    1bb2:	ca 01       	movw	r24, r20
    1bb4:	a0 01       	movw	r20, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	ff 27       	eor	r31, r31
    1bba:	59 1b       	sub	r21, r25
    1bbc:	99 f0       	breq	.+38     	; 0x1be4 <__addsf3x+0x60>
    1bbe:	59 3f       	cpi	r21, 0xF9	; 249
    1bc0:	50 f4       	brcc	.+20     	; 0x1bd6 <__addsf3x+0x52>
    1bc2:	50 3e       	cpi	r21, 0xE0	; 224
    1bc4:	68 f1       	brcs	.+90     	; 0x1c20 <__addsf3x+0x9c>
    1bc6:	1a 16       	cp	r1, r26
    1bc8:	f0 40       	sbci	r31, 0x00	; 0
    1bca:	a2 2f       	mov	r26, r18
    1bcc:	23 2f       	mov	r18, r19
    1bce:	34 2f       	mov	r19, r20
    1bd0:	44 27       	eor	r20, r20
    1bd2:	58 5f       	subi	r21, 0xF8	; 248
    1bd4:	f3 cf       	rjmp	.-26     	; 0x1bbc <__addsf3x+0x38>
    1bd6:	46 95       	lsr	r20
    1bd8:	37 95       	ror	r19
    1bda:	27 95       	ror	r18
    1bdc:	a7 95       	ror	r26
    1bde:	f0 40       	sbci	r31, 0x00	; 0
    1be0:	53 95       	inc	r21
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <__addsf3x+0x52>
    1be4:	7e f4       	brtc	.+30     	; 0x1c04 <__addsf3x+0x80>
    1be6:	1f 16       	cp	r1, r31
    1be8:	ba 0b       	sbc	r27, r26
    1bea:	62 0b       	sbc	r22, r18
    1bec:	73 0b       	sbc	r23, r19
    1bee:	84 0b       	sbc	r24, r20
    1bf0:	ba f0       	brmi	.+46     	; 0x1c20 <__addsf3x+0x9c>
    1bf2:	91 50       	subi	r25, 0x01	; 1
    1bf4:	a1 f0       	breq	.+40     	; 0x1c1e <__addsf3x+0x9a>
    1bf6:	ff 0f       	add	r31, r31
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	66 1f       	adc	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	c2 f7       	brpl	.-16     	; 0x1bf2 <__addsf3x+0x6e>
    1c02:	0e c0       	rjmp	.+28     	; 0x1c20 <__addsf3x+0x9c>
    1c04:	ba 0f       	add	r27, r26
    1c06:	62 1f       	adc	r22, r18
    1c08:	73 1f       	adc	r23, r19
    1c0a:	84 1f       	adc	r24, r20
    1c0c:	48 f4       	brcc	.+18     	; 0x1c20 <__addsf3x+0x9c>
    1c0e:	87 95       	ror	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	b7 95       	ror	r27
    1c16:	f7 95       	ror	r31
    1c18:	9e 3f       	cpi	r25, 0xFE	; 254
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <__addsf3x+0x9a>
    1c1c:	b0 cf       	rjmp	.-160    	; 0x1b7e <__addsf3+0x28>
    1c1e:	93 95       	inc	r25
    1c20:	88 0f       	add	r24, r24
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <__addsf3x+0xa2>
    1c24:	99 27       	eor	r25, r25
    1c26:	ee 0f       	add	r30, r30
    1c28:	97 95       	ror	r25
    1c2a:	87 95       	ror	r24
    1c2c:	08 95       	ret

00001c2e <__cmpsf2>:
    1c2e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_cmp>
    1c32:	08 f4       	brcc	.+2      	; 0x1c36 <__cmpsf2+0x8>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	08 95       	ret

00001c38 <__divsf3>:
    1c38:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__divsf3x>
    1c3c:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_round>
    1c40:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fp_pscB>
    1c44:	58 f0       	brcs	.+22     	; 0x1c5c <__divsf3+0x24>
    1c46:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscA>
    1c4a:	40 f0       	brcs	.+16     	; 0x1c5c <__divsf3+0x24>
    1c4c:	29 f4       	brne	.+10     	; 0x1c58 <__divsf3+0x20>
    1c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c50:	29 f0       	breq	.+10     	; 0x1c5c <__divsf3+0x24>
    1c52:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1c56:	51 11       	cpse	r21, r1
    1c58:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_szero>
    1c5c:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_nan>

00001c60 <__divsf3x>:
    1c60:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fp_split3>
    1c64:	68 f3       	brcs	.-38     	; 0x1c40 <__divsf3+0x8>

00001c66 <__divsf3_pse>:
    1c66:	99 23       	and	r25, r25
    1c68:	b1 f3       	breq	.-20     	; 0x1c56 <__divsf3+0x1e>
    1c6a:	55 23       	and	r21, r21
    1c6c:	91 f3       	breq	.-28     	; 0x1c52 <__divsf3+0x1a>
    1c6e:	95 1b       	sub	r25, r21
    1c70:	55 0b       	sbc	r21, r21
    1c72:	bb 27       	eor	r27, r27
    1c74:	aa 27       	eor	r26, r26
    1c76:	62 17       	cp	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	38 f0       	brcs	.+14     	; 0x1c8c <__divsf3_pse+0x26>
    1c7e:	9f 5f       	subi	r25, 0xFF	; 255
    1c80:	5f 4f       	sbci	r21, 0xFF	; 255
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	44 1f       	adc	r20, r20
    1c88:	aa 1f       	adc	r26, r26
    1c8a:	a9 f3       	breq	.-22     	; 0x1c76 <__divsf3_pse+0x10>
    1c8c:	35 d0       	rcall	.+106    	; 0x1cf8 <__divsf3_pse+0x92>
    1c8e:	0e 2e       	mov	r0, r30
    1c90:	3a f0       	brmi	.+14     	; 0x1ca0 <__divsf3_pse+0x3a>
    1c92:	e0 e8       	ldi	r30, 0x80	; 128
    1c94:	32 d0       	rcall	.+100    	; 0x1cfa <__divsf3_pse+0x94>
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	50 40       	sbci	r21, 0x00	; 0
    1c9a:	e6 95       	lsr	r30
    1c9c:	00 1c       	adc	r0, r0
    1c9e:	ca f7       	brpl	.-14     	; 0x1c92 <__divsf3_pse+0x2c>
    1ca0:	2b d0       	rcall	.+86     	; 0x1cf8 <__divsf3_pse+0x92>
    1ca2:	fe 2f       	mov	r31, r30
    1ca4:	29 d0       	rcall	.+82     	; 0x1cf8 <__divsf3_pse+0x92>
    1ca6:	66 0f       	add	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	bb 1f       	adc	r27, r27
    1cae:	26 17       	cp	r18, r22
    1cb0:	37 07       	cpc	r19, r23
    1cb2:	48 07       	cpc	r20, r24
    1cb4:	ab 07       	cpc	r26, r27
    1cb6:	b0 e8       	ldi	r27, 0x80	; 128
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <__divsf3_pse+0x56>
    1cba:	bb 0b       	sbc	r27, r27
    1cbc:	80 2d       	mov	r24, r0
    1cbe:	bf 01       	movw	r22, r30
    1cc0:	ff 27       	eor	r31, r31
    1cc2:	93 58       	subi	r25, 0x83	; 131
    1cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc6:	3a f0       	brmi	.+14     	; 0x1cd6 <__divsf3_pse+0x70>
    1cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cca:	51 05       	cpc	r21, r1
    1ccc:	78 f0       	brcs	.+30     	; 0x1cec <__divsf3_pse+0x86>
    1cce:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1cd2:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_szero>
    1cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd8:	e4 f3       	brlt	.-8      	; 0x1cd2 <__divsf3_pse+0x6c>
    1cda:	98 3e       	cpi	r25, 0xE8	; 232
    1cdc:	d4 f3       	brlt	.-12     	; 0x1cd2 <__divsf3_pse+0x6c>
    1cde:	86 95       	lsr	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	b7 95       	ror	r27
    1ce6:	f7 95       	ror	r31
    1ce8:	9f 5f       	subi	r25, 0xFF	; 255
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <__divsf3_pse+0x78>
    1cec:	88 0f       	add	r24, r24
    1cee:	91 1d       	adc	r25, r1
    1cf0:	96 95       	lsr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	97 f9       	bld	r25, 7
    1cf6:	08 95       	ret
    1cf8:	e1 e0       	ldi	r30, 0x01	; 1
    1cfa:	66 0f       	add	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	88 1f       	adc	r24, r24
    1d00:	bb 1f       	adc	r27, r27
    1d02:	62 17       	cp	r22, r18
    1d04:	73 07       	cpc	r23, r19
    1d06:	84 07       	cpc	r24, r20
    1d08:	ba 07       	cpc	r27, r26
    1d0a:	20 f0       	brcs	.+8      	; 0x1d14 <__divsf3_pse+0xae>
    1d0c:	62 1b       	sub	r22, r18
    1d0e:	73 0b       	sbc	r23, r19
    1d10:	84 0b       	sbc	r24, r20
    1d12:	ba 0b       	sbc	r27, r26
    1d14:	ee 1f       	adc	r30, r30
    1d16:	88 f7       	brcc	.-30     	; 0x1cfa <__divsf3_pse+0x94>
    1d18:	e0 95       	com	r30
    1d1a:	08 95       	ret

00001d1c <__fixunssfsi>:
    1d1c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fp_splitA>
    1d20:	88 f0       	brcs	.+34     	; 0x1d44 <__fixunssfsi+0x28>
    1d22:	9f 57       	subi	r25, 0x7F	; 127
    1d24:	98 f0       	brcs	.+38     	; 0x1d4c <__fixunssfsi+0x30>
    1d26:	b9 2f       	mov	r27, r25
    1d28:	99 27       	eor	r25, r25
    1d2a:	b7 51       	subi	r27, 0x17	; 23
    1d2c:	b0 f0       	brcs	.+44     	; 0x1d5a <__fixunssfsi+0x3e>
    1d2e:	e1 f0       	breq	.+56     	; 0x1d68 <__fixunssfsi+0x4c>
    1d30:	66 0f       	add	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	1a f0       	brmi	.+6      	; 0x1d40 <__fixunssfsi+0x24>
    1d3a:	ba 95       	dec	r27
    1d3c:	c9 f7       	brne	.-14     	; 0x1d30 <__fixunssfsi+0x14>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <__fixunssfsi+0x4c>
    1d40:	b1 30       	cpi	r27, 0x01	; 1
    1d42:	91 f0       	breq	.+36     	; 0x1d68 <__fixunssfsi+0x4c>
    1d44:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__fp_zero>
    1d48:	b1 e0       	ldi	r27, 0x01	; 1
    1d4a:	08 95       	ret
    1d4c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_zero>
    1d50:	67 2f       	mov	r22, r23
    1d52:	78 2f       	mov	r23, r24
    1d54:	88 27       	eor	r24, r24
    1d56:	b8 5f       	subi	r27, 0xF8	; 248
    1d58:	39 f0       	breq	.+14     	; 0x1d68 <__fixunssfsi+0x4c>
    1d5a:	b9 3f       	cpi	r27, 0xF9	; 249
    1d5c:	cc f3       	brlt	.-14     	; 0x1d50 <__fixunssfsi+0x34>
    1d5e:	86 95       	lsr	r24
    1d60:	77 95       	ror	r23
    1d62:	67 95       	ror	r22
    1d64:	b3 95       	inc	r27
    1d66:	d9 f7       	brne	.-10     	; 0x1d5e <__fixunssfsi+0x42>
    1d68:	3e f4       	brtc	.+14     	; 0x1d78 <__fixunssfsi+0x5c>
    1d6a:	90 95       	com	r25
    1d6c:	80 95       	com	r24
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	08 95       	ret

00001d7a <__floatunsisf>:
    1d7a:	e8 94       	clt
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <__floatsisf+0x12>

00001d7e <__floatsisf>:
    1d7e:	97 fb       	bst	r25, 7
    1d80:	3e f4       	brtc	.+14     	; 0x1d90 <__floatsisf+0x12>
    1d82:	90 95       	com	r25
    1d84:	80 95       	com	r24
    1d86:	70 95       	com	r23
    1d88:	61 95       	neg	r22
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	99 23       	and	r25, r25
    1d92:	a9 f0       	breq	.+42     	; 0x1dbe <__floatsisf+0x40>
    1d94:	f9 2f       	mov	r31, r25
    1d96:	96 e9       	ldi	r25, 0x96	; 150
    1d98:	bb 27       	eor	r27, r27
    1d9a:	93 95       	inc	r25
    1d9c:	f6 95       	lsr	r31
    1d9e:	87 95       	ror	r24
    1da0:	77 95       	ror	r23
    1da2:	67 95       	ror	r22
    1da4:	b7 95       	ror	r27
    1da6:	f1 11       	cpse	r31, r1
    1da8:	f8 cf       	rjmp	.-16     	; 0x1d9a <__floatsisf+0x1c>
    1daa:	fa f4       	brpl	.+62     	; 0x1dea <__floatsisf+0x6c>
    1dac:	bb 0f       	add	r27, r27
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <__floatsisf+0x36>
    1db0:	60 ff       	sbrs	r22, 0
    1db2:	1b c0       	rjmp	.+54     	; 0x1dea <__floatsisf+0x6c>
    1db4:	6f 5f       	subi	r22, 0xFF	; 255
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	16 c0       	rjmp	.+44     	; 0x1dea <__floatsisf+0x6c>
    1dbe:	88 23       	and	r24, r24
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <__floatsisf+0x48>
    1dc2:	96 e9       	ldi	r25, 0x96	; 150
    1dc4:	11 c0       	rjmp	.+34     	; 0x1de8 <__floatsisf+0x6a>
    1dc6:	77 23       	and	r23, r23
    1dc8:	21 f0       	breq	.+8      	; 0x1dd2 <__floatsisf+0x54>
    1dca:	9e e8       	ldi	r25, 0x8E	; 142
    1dcc:	87 2f       	mov	r24, r23
    1dce:	76 2f       	mov	r23, r22
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <__floatsisf+0x5e>
    1dd2:	66 23       	and	r22, r22
    1dd4:	71 f0       	breq	.+28     	; 0x1df2 <__floatsisf+0x74>
    1dd6:	96 e8       	ldi	r25, 0x86	; 134
    1dd8:	86 2f       	mov	r24, r22
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	2a f0       	brmi	.+10     	; 0x1dea <__floatsisf+0x6c>
    1de0:	9a 95       	dec	r25
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	da f7       	brpl	.-10     	; 0x1de0 <__floatsisf+0x62>
    1dea:	88 0f       	add	r24, r24
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	97 f9       	bld	r25, 7
    1df2:	08 95       	ret

00001df4 <__fp_cmp>:
    1df4:	99 0f       	add	r25, r25
    1df6:	00 08       	sbc	r0, r0
    1df8:	55 0f       	add	r21, r21
    1dfa:	aa 0b       	sbc	r26, r26
    1dfc:	e0 e8       	ldi	r30, 0x80	; 128
    1dfe:	fe ef       	ldi	r31, 0xFE	; 254
    1e00:	16 16       	cp	r1, r22
    1e02:	17 06       	cpc	r1, r23
    1e04:	e8 07       	cpc	r30, r24
    1e06:	f9 07       	cpc	r31, r25
    1e08:	c0 f0       	brcs	.+48     	; 0x1e3a <__fp_cmp+0x46>
    1e0a:	12 16       	cp	r1, r18
    1e0c:	13 06       	cpc	r1, r19
    1e0e:	e4 07       	cpc	r30, r20
    1e10:	f5 07       	cpc	r31, r21
    1e12:	98 f0       	brcs	.+38     	; 0x1e3a <__fp_cmp+0x46>
    1e14:	62 1b       	sub	r22, r18
    1e16:	73 0b       	sbc	r23, r19
    1e18:	84 0b       	sbc	r24, r20
    1e1a:	95 0b       	sbc	r25, r21
    1e1c:	39 f4       	brne	.+14     	; 0x1e2c <__fp_cmp+0x38>
    1e1e:	0a 26       	eor	r0, r26
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <__fp_cmp+0x46>
    1e22:	23 2b       	or	r18, r19
    1e24:	24 2b       	or	r18, r20
    1e26:	25 2b       	or	r18, r21
    1e28:	21 f4       	brne	.+8      	; 0x1e32 <__fp_cmp+0x3e>
    1e2a:	08 95       	ret
    1e2c:	0a 26       	eor	r0, r26
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <__fp_cmp+0x3e>
    1e30:	a1 40       	sbci	r26, 0x01	; 1
    1e32:	a6 95       	lsr	r26
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	81 1d       	adc	r24, r1
    1e38:	81 1d       	adc	r24, r1
    1e3a:	08 95       	ret

00001e3c <__fp_inf>:
    1e3c:	97 f9       	bld	r25, 7
    1e3e:	9f 67       	ori	r25, 0x7F	; 127
    1e40:	80 e8       	ldi	r24, 0x80	; 128
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	08 95       	ret

00001e48 <__fp_nan>:
    1e48:	9f ef       	ldi	r25, 0xFF	; 255
    1e4a:	80 ec       	ldi	r24, 0xC0	; 192
    1e4c:	08 95       	ret

00001e4e <__fp_pscA>:
    1e4e:	00 24       	eor	r0, r0
    1e50:	0a 94       	dec	r0
    1e52:	16 16       	cp	r1, r22
    1e54:	17 06       	cpc	r1, r23
    1e56:	18 06       	cpc	r1, r24
    1e58:	09 06       	cpc	r0, r25
    1e5a:	08 95       	ret

00001e5c <__fp_pscB>:
    1e5c:	00 24       	eor	r0, r0
    1e5e:	0a 94       	dec	r0
    1e60:	12 16       	cp	r1, r18
    1e62:	13 06       	cpc	r1, r19
    1e64:	14 06       	cpc	r1, r20
    1e66:	05 06       	cpc	r0, r21
    1e68:	08 95       	ret

00001e6a <__fp_round>:
    1e6a:	09 2e       	mov	r0, r25
    1e6c:	03 94       	inc	r0
    1e6e:	00 0c       	add	r0, r0
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <__fp_round+0xc>
    1e72:	88 23       	and	r24, r24
    1e74:	52 f0       	brmi	.+20     	; 0x1e8a <__fp_round+0x20>
    1e76:	bb 0f       	add	r27, r27
    1e78:	40 f4       	brcc	.+16     	; 0x1e8a <__fp_round+0x20>
    1e7a:	bf 2b       	or	r27, r31
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <__fp_round+0x18>
    1e7e:	60 ff       	sbrs	r22, 0
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <__fp_round+0x20>
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	08 95       	ret

00001e8c <__fp_split3>:
    1e8c:	57 fd       	sbrc	r21, 7
    1e8e:	90 58       	subi	r25, 0x80	; 128
    1e90:	44 0f       	add	r20, r20
    1e92:	55 1f       	adc	r21, r21
    1e94:	59 f0       	breq	.+22     	; 0x1eac <__fp_splitA+0x10>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	71 f0       	breq	.+28     	; 0x1eb6 <__fp_splitA+0x1a>
    1e9a:	47 95       	ror	r20

00001e9c <__fp_splitA>:
    1e9c:	88 0f       	add	r24, r24
    1e9e:	97 fb       	bst	r25, 7
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <__fp_splitA+0x20>
    1ea4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea6:	79 f0       	breq	.+30     	; 0x1ec6 <__fp_splitA+0x2a>
    1ea8:	87 95       	ror	r24
    1eaa:	08 95       	ret
    1eac:	12 16       	cp	r1, r18
    1eae:	13 06       	cpc	r1, r19
    1eb0:	14 06       	cpc	r1, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	f2 cf       	rjmp	.-28     	; 0x1e9a <__fp_split3+0xe>
    1eb6:	46 95       	lsr	r20
    1eb8:	f1 df       	rcall	.-30     	; 0x1e9c <__fp_splitA>
    1eba:	08 c0       	rjmp	.+16     	; 0x1ecc <__fp_splitA+0x30>
    1ebc:	16 16       	cp	r1, r22
    1ebe:	17 06       	cpc	r1, r23
    1ec0:	18 06       	cpc	r1, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	f1 cf       	rjmp	.-30     	; 0x1ea8 <__fp_splitA+0xc>
    1ec6:	86 95       	lsr	r24
    1ec8:	71 05       	cpc	r23, r1
    1eca:	61 05       	cpc	r22, r1
    1ecc:	08 94       	sec
    1ece:	08 95       	ret

00001ed0 <__fp_zero>:
    1ed0:	e8 94       	clt

00001ed2 <__fp_szero>:
    1ed2:	bb 27       	eor	r27, r27
    1ed4:	66 27       	eor	r22, r22
    1ed6:	77 27       	eor	r23, r23
    1ed8:	cb 01       	movw	r24, r22
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret

00001ede <__mulsf3>:
    1ede:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__mulsf3x>
    1ee2:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_round>
    1ee6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__fp_pscA>
    1eea:	38 f0       	brcs	.+14     	; 0x1efa <__mulsf3+0x1c>
    1eec:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__fp_pscB>
    1ef0:	20 f0       	brcs	.+8      	; 0x1efa <__mulsf3+0x1c>
    1ef2:	95 23       	and	r25, r21
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <__mulsf3+0x1c>
    1ef6:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1efa:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__fp_nan>
    1efe:	11 24       	eor	r1, r1
    1f00:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_szero>

00001f04 <__mulsf3x>:
    1f04:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fp_split3>
    1f08:	70 f3       	brcs	.-36     	; 0x1ee6 <__mulsf3+0x8>

00001f0a <__mulsf3_pse>:
    1f0a:	95 9f       	mul	r25, r21
    1f0c:	c1 f3       	breq	.-16     	; 0x1efe <__mulsf3+0x20>
    1f0e:	95 0f       	add	r25, r21
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	55 1f       	adc	r21, r21
    1f14:	62 9f       	mul	r22, r18
    1f16:	f0 01       	movw	r30, r0
    1f18:	72 9f       	mul	r23, r18
    1f1a:	bb 27       	eor	r27, r27
    1f1c:	f0 0d       	add	r31, r0
    1f1e:	b1 1d       	adc	r27, r1
    1f20:	63 9f       	mul	r22, r19
    1f22:	aa 27       	eor	r26, r26
    1f24:	f0 0d       	add	r31, r0
    1f26:	b1 1d       	adc	r27, r1
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	64 9f       	mul	r22, r20
    1f2c:	66 27       	eor	r22, r22
    1f2e:	b0 0d       	add	r27, r0
    1f30:	a1 1d       	adc	r26, r1
    1f32:	66 1f       	adc	r22, r22
    1f34:	82 9f       	mul	r24, r18
    1f36:	22 27       	eor	r18, r18
    1f38:	b0 0d       	add	r27, r0
    1f3a:	a1 1d       	adc	r26, r1
    1f3c:	62 1f       	adc	r22, r18
    1f3e:	73 9f       	mul	r23, r19
    1f40:	b0 0d       	add	r27, r0
    1f42:	a1 1d       	adc	r26, r1
    1f44:	62 1f       	adc	r22, r18
    1f46:	83 9f       	mul	r24, r19
    1f48:	a0 0d       	add	r26, r0
    1f4a:	61 1d       	adc	r22, r1
    1f4c:	22 1f       	adc	r18, r18
    1f4e:	74 9f       	mul	r23, r20
    1f50:	33 27       	eor	r19, r19
    1f52:	a0 0d       	add	r26, r0
    1f54:	61 1d       	adc	r22, r1
    1f56:	23 1f       	adc	r18, r19
    1f58:	84 9f       	mul	r24, r20
    1f5a:	60 0d       	add	r22, r0
    1f5c:	21 1d       	adc	r18, r1
    1f5e:	82 2f       	mov	r24, r18
    1f60:	76 2f       	mov	r23, r22
    1f62:	6a 2f       	mov	r22, r26
    1f64:	11 24       	eor	r1, r1
    1f66:	9f 57       	subi	r25, 0x7F	; 127
    1f68:	50 40       	sbci	r21, 0x00	; 0
    1f6a:	9a f0       	brmi	.+38     	; 0x1f92 <__mulsf3_pse+0x88>
    1f6c:	f1 f0       	breq	.+60     	; 0x1faa <__mulsf3_pse+0xa0>
    1f6e:	88 23       	and	r24, r24
    1f70:	4a f0       	brmi	.+18     	; 0x1f84 <__mulsf3_pse+0x7a>
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	bb 1f       	adc	r27, r27
    1f78:	66 1f       	adc	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	91 50       	subi	r25, 0x01	; 1
    1f80:	50 40       	sbci	r21, 0x00	; 0
    1f82:	a9 f7       	brne	.-22     	; 0x1f6e <__mulsf3_pse+0x64>
    1f84:	9e 3f       	cpi	r25, 0xFE	; 254
    1f86:	51 05       	cpc	r21, r1
    1f88:	80 f0       	brcs	.+32     	; 0x1faa <__mulsf3_pse+0xa0>
    1f8a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__fp_inf>
    1f8e:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__fp_szero>
    1f92:	5f 3f       	cpi	r21, 0xFF	; 255
    1f94:	e4 f3       	brlt	.-8      	; 0x1f8e <__mulsf3_pse+0x84>
    1f96:	98 3e       	cpi	r25, 0xE8	; 232
    1f98:	d4 f3       	brlt	.-12     	; 0x1f8e <__mulsf3_pse+0x84>
    1f9a:	86 95       	lsr	r24
    1f9c:	77 95       	ror	r23
    1f9e:	67 95       	ror	r22
    1fa0:	b7 95       	ror	r27
    1fa2:	f7 95       	ror	r31
    1fa4:	e7 95       	ror	r30
    1fa6:	9f 5f       	subi	r25, 0xFF	; 255
    1fa8:	c1 f7       	brne	.-16     	; 0x1f9a <__mulsf3_pse+0x90>
    1faa:	fe 2b       	or	r31, r30
    1fac:	88 0f       	add	r24, r24
    1fae:	91 1d       	adc	r25, r1
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret

00001fb8 <__divmodhi4>:
    1fb8:	97 fb       	bst	r25, 7
    1fba:	07 2e       	mov	r0, r23
    1fbc:	16 f4       	brtc	.+4      	; 0x1fc2 <__divmodhi4+0xa>
    1fbe:	00 94       	com	r0
    1fc0:	07 d0       	rcall	.+14     	; 0x1fd0 <__divmodhi4_neg1>
    1fc2:	77 fd       	sbrc	r23, 7
    1fc4:	09 d0       	rcall	.+18     	; 0x1fd8 <__divmodhi4_neg2>
    1fc6:	0e 94 18 10 	call	0x2030	; 0x2030 <__udivmodhi4>
    1fca:	07 fc       	sbrc	r0, 7
    1fcc:	05 d0       	rcall	.+10     	; 0x1fd8 <__divmodhi4_neg2>
    1fce:	3e f4       	brtc	.+14     	; 0x1fde <__divmodhi4_exit>

00001fd0 <__divmodhi4_neg1>:
    1fd0:	90 95       	com	r25
    1fd2:	81 95       	neg	r24
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	08 95       	ret

00001fd8 <__divmodhi4_neg2>:
    1fd8:	70 95       	com	r23
    1fda:	61 95       	neg	r22
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255

00001fde <__divmodhi4_exit>:
    1fde:	08 95       	ret

00001fe0 <__udivmodsi4>:
    1fe0:	a1 e2       	ldi	r26, 0x21	; 33
    1fe2:	1a 2e       	mov	r1, r26
    1fe4:	aa 1b       	sub	r26, r26
    1fe6:	bb 1b       	sub	r27, r27
    1fe8:	fd 01       	movw	r30, r26
    1fea:	0d c0       	rjmp	.+26     	; 0x2006 <__udivmodsi4_ep>

00001fec <__udivmodsi4_loop>:
    1fec:	aa 1f       	adc	r26, r26
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	ee 1f       	adc	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	a2 17       	cp	r26, r18
    1ff6:	b3 07       	cpc	r27, r19
    1ff8:	e4 07       	cpc	r30, r20
    1ffa:	f5 07       	cpc	r31, r21
    1ffc:	20 f0       	brcs	.+8      	; 0x2006 <__udivmodsi4_ep>
    1ffe:	a2 1b       	sub	r26, r18
    2000:	b3 0b       	sbc	r27, r19
    2002:	e4 0b       	sbc	r30, r20
    2004:	f5 0b       	sbc	r31, r21

00002006 <__udivmodsi4_ep>:
    2006:	66 1f       	adc	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	1a 94       	dec	r1
    2010:	69 f7       	brne	.-38     	; 0x1fec <__udivmodsi4_loop>
    2012:	60 95       	com	r22
    2014:	70 95       	com	r23
    2016:	80 95       	com	r24
    2018:	90 95       	com	r25
    201a:	9b 01       	movw	r18, r22
    201c:	ac 01       	movw	r20, r24
    201e:	bd 01       	movw	r22, r26
    2020:	cf 01       	movw	r24, r30
    2022:	08 95       	ret

00002024 <__tablejump2__>:
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	05 90       	lpm	r0, Z+
    202a:	f4 91       	lpm	r31, Z
    202c:	e0 2d       	mov	r30, r0
    202e:	09 94       	ijmp

00002030 <__udivmodhi4>:
    2030:	aa 1b       	sub	r26, r26
    2032:	bb 1b       	sub	r27, r27
    2034:	51 e1       	ldi	r21, 0x11	; 17
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <__udivmodhi4_ep>

00002038 <__udivmodhi4_loop>:
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	a6 17       	cp	r26, r22
    203e:	b7 07       	cpc	r27, r23
    2040:	10 f0       	brcs	.+4      	; 0x2046 <__udivmodhi4_ep>
    2042:	a6 1b       	sub	r26, r22
    2044:	b7 0b       	sbc	r27, r23

00002046 <__udivmodhi4_ep>:
    2046:	88 1f       	adc	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	5a 95       	dec	r21
    204c:	a9 f7       	brne	.-22     	; 0x2038 <__udivmodhi4_loop>
    204e:	80 95       	com	r24
    2050:	90 95       	com	r25
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	08 95       	ret

00002058 <sprintf>:
    2058:	ae e0       	ldi	r26, 0x0E	; 14
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e2 e3       	ldi	r30, 0x32	; 50
    205e:	f0 e1       	ldi	r31, 0x10	; 16
    2060:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__prologue_saves__+0x1c>
    2064:	0d 89       	ldd	r16, Y+21	; 0x15
    2066:	1e 89       	ldd	r17, Y+22	; 0x16
    2068:	86 e0       	ldi	r24, 0x06	; 6
    206a:	8c 83       	std	Y+4, r24	; 0x04
    206c:	1a 83       	std	Y+2, r17	; 0x02
    206e:	09 83       	std	Y+1, r16	; 0x01
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	9f e7       	ldi	r25, 0x7F	; 127
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	ae 01       	movw	r20, r28
    207a:	47 5e       	subi	r20, 0xE7	; 231
    207c:	5f 4f       	sbci	r21, 0xFF	; 255
    207e:	6f 89       	ldd	r22, Y+23	; 0x17
    2080:	78 8d       	ldd	r23, Y+24	; 0x18
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	0e 94 4e 10 	call	0x209c	; 0x209c <vfprintf>
    208a:	ef 81       	ldd	r30, Y+7	; 0x07
    208c:	f8 85       	ldd	r31, Y+8	; 0x08
    208e:	e0 0f       	add	r30, r16
    2090:	f1 1f       	adc	r31, r17
    2092:	10 82       	st	Z, r1
    2094:	2e 96       	adiw	r28, 0x0e	; 14
    2096:	e4 e0       	ldi	r30, 0x04	; 4
    2098:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__epilogue_restores__+0x1c>

0000209c <vfprintf>:
    209c:	ab e0       	ldi	r26, 0x0B	; 11
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e4 e5       	ldi	r30, 0x54	; 84
    20a2:	f0 e1       	ldi	r31, 0x10	; 16
    20a4:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__>
    20a8:	6c 01       	movw	r12, r24
    20aa:	7b 01       	movw	r14, r22
    20ac:	8a 01       	movw	r16, r20
    20ae:	fc 01       	movw	r30, r24
    20b0:	17 82       	std	Z+7, r1	; 0x07
    20b2:	16 82       	std	Z+6, r1	; 0x06
    20b4:	83 81       	ldd	r24, Z+3	; 0x03
    20b6:	81 ff       	sbrs	r24, 1
    20b8:	cc c1       	rjmp	.+920    	; 0x2452 <vfprintf+0x3b6>
    20ba:	ce 01       	movw	r24, r28
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	3c 01       	movw	r6, r24
    20c0:	f6 01       	movw	r30, r12
    20c2:	93 81       	ldd	r25, Z+3	; 0x03
    20c4:	f7 01       	movw	r30, r14
    20c6:	93 fd       	sbrc	r25, 3
    20c8:	85 91       	lpm	r24, Z+
    20ca:	93 ff       	sbrs	r25, 3
    20cc:	81 91       	ld	r24, Z+
    20ce:	7f 01       	movw	r14, r30
    20d0:	88 23       	and	r24, r24
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <vfprintf+0x3a>
    20d4:	ba c1       	rjmp	.+884    	; 0x244a <vfprintf+0x3ae>
    20d6:	85 32       	cpi	r24, 0x25	; 37
    20d8:	39 f4       	brne	.+14     	; 0x20e8 <vfprintf+0x4c>
    20da:	93 fd       	sbrc	r25, 3
    20dc:	85 91       	lpm	r24, Z+
    20de:	93 ff       	sbrs	r25, 3
    20e0:	81 91       	ld	r24, Z+
    20e2:	7f 01       	movw	r14, r30
    20e4:	85 32       	cpi	r24, 0x25	; 37
    20e6:	29 f4       	brne	.+10     	; 0x20f2 <vfprintf+0x56>
    20e8:	b6 01       	movw	r22, r12
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    20f0:	e7 cf       	rjmp	.-50     	; 0x20c0 <vfprintf+0x24>
    20f2:	91 2c       	mov	r9, r1
    20f4:	21 2c       	mov	r2, r1
    20f6:	31 2c       	mov	r3, r1
    20f8:	ff e1       	ldi	r31, 0x1F	; 31
    20fa:	f3 15       	cp	r31, r3
    20fc:	d8 f0       	brcs	.+54     	; 0x2134 <vfprintf+0x98>
    20fe:	8b 32       	cpi	r24, 0x2B	; 43
    2100:	79 f0       	breq	.+30     	; 0x2120 <vfprintf+0x84>
    2102:	38 f4       	brcc	.+14     	; 0x2112 <vfprintf+0x76>
    2104:	80 32       	cpi	r24, 0x20	; 32
    2106:	79 f0       	breq	.+30     	; 0x2126 <vfprintf+0x8a>
    2108:	83 32       	cpi	r24, 0x23	; 35
    210a:	a1 f4       	brne	.+40     	; 0x2134 <vfprintf+0x98>
    210c:	23 2d       	mov	r18, r3
    210e:	20 61       	ori	r18, 0x10	; 16
    2110:	1d c0       	rjmp	.+58     	; 0x214c <vfprintf+0xb0>
    2112:	8d 32       	cpi	r24, 0x2D	; 45
    2114:	61 f0       	breq	.+24     	; 0x212e <vfprintf+0x92>
    2116:	80 33       	cpi	r24, 0x30	; 48
    2118:	69 f4       	brne	.+26     	; 0x2134 <vfprintf+0x98>
    211a:	23 2d       	mov	r18, r3
    211c:	21 60       	ori	r18, 0x01	; 1
    211e:	16 c0       	rjmp	.+44     	; 0x214c <vfprintf+0xb0>
    2120:	83 2d       	mov	r24, r3
    2122:	82 60       	ori	r24, 0x02	; 2
    2124:	38 2e       	mov	r3, r24
    2126:	e3 2d       	mov	r30, r3
    2128:	e4 60       	ori	r30, 0x04	; 4
    212a:	3e 2e       	mov	r3, r30
    212c:	2a c0       	rjmp	.+84     	; 0x2182 <vfprintf+0xe6>
    212e:	f3 2d       	mov	r31, r3
    2130:	f8 60       	ori	r31, 0x08	; 8
    2132:	1d c0       	rjmp	.+58     	; 0x216e <vfprintf+0xd2>
    2134:	37 fc       	sbrc	r3, 7
    2136:	2d c0       	rjmp	.+90     	; 0x2192 <vfprintf+0xf6>
    2138:	20 ed       	ldi	r18, 0xD0	; 208
    213a:	28 0f       	add	r18, r24
    213c:	2a 30       	cpi	r18, 0x0A	; 10
    213e:	40 f0       	brcs	.+16     	; 0x2150 <vfprintf+0xb4>
    2140:	8e 32       	cpi	r24, 0x2E	; 46
    2142:	b9 f4       	brne	.+46     	; 0x2172 <vfprintf+0xd6>
    2144:	36 fc       	sbrc	r3, 6
    2146:	81 c1       	rjmp	.+770    	; 0x244a <vfprintf+0x3ae>
    2148:	23 2d       	mov	r18, r3
    214a:	20 64       	ori	r18, 0x40	; 64
    214c:	32 2e       	mov	r3, r18
    214e:	19 c0       	rjmp	.+50     	; 0x2182 <vfprintf+0xe6>
    2150:	36 fe       	sbrs	r3, 6
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <vfprintf+0xc4>
    2154:	8a e0       	ldi	r24, 0x0A	; 10
    2156:	98 9e       	mul	r9, r24
    2158:	20 0d       	add	r18, r0
    215a:	11 24       	eor	r1, r1
    215c:	92 2e       	mov	r9, r18
    215e:	11 c0       	rjmp	.+34     	; 0x2182 <vfprintf+0xe6>
    2160:	ea e0       	ldi	r30, 0x0A	; 10
    2162:	2e 9e       	mul	r2, r30
    2164:	20 0d       	add	r18, r0
    2166:	11 24       	eor	r1, r1
    2168:	22 2e       	mov	r2, r18
    216a:	f3 2d       	mov	r31, r3
    216c:	f0 62       	ori	r31, 0x20	; 32
    216e:	3f 2e       	mov	r3, r31
    2170:	08 c0       	rjmp	.+16     	; 0x2182 <vfprintf+0xe6>
    2172:	8c 36       	cpi	r24, 0x6C	; 108
    2174:	21 f4       	brne	.+8      	; 0x217e <vfprintf+0xe2>
    2176:	83 2d       	mov	r24, r3
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	38 2e       	mov	r3, r24
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0xe6>
    217e:	88 36       	cpi	r24, 0x68	; 104
    2180:	41 f4       	brne	.+16     	; 0x2192 <vfprintf+0xf6>
    2182:	f7 01       	movw	r30, r14
    2184:	93 fd       	sbrc	r25, 3
    2186:	85 91       	lpm	r24, Z+
    2188:	93 ff       	sbrs	r25, 3
    218a:	81 91       	ld	r24, Z+
    218c:	7f 01       	movw	r14, r30
    218e:	81 11       	cpse	r24, r1
    2190:	b3 cf       	rjmp	.-154    	; 0x20f8 <vfprintf+0x5c>
    2192:	98 2f       	mov	r25, r24
    2194:	9f 7d       	andi	r25, 0xDF	; 223
    2196:	95 54       	subi	r25, 0x45	; 69
    2198:	93 30       	cpi	r25, 0x03	; 3
    219a:	28 f4       	brcc	.+10     	; 0x21a6 <vfprintf+0x10a>
    219c:	0c 5f       	subi	r16, 0xFC	; 252
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	9f e3       	ldi	r25, 0x3F	; 63
    21a2:	99 83       	std	Y+1, r25	; 0x01
    21a4:	0d c0       	rjmp	.+26     	; 0x21c0 <vfprintf+0x124>
    21a6:	83 36       	cpi	r24, 0x63	; 99
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <vfprintf+0x11a>
    21aa:	83 37       	cpi	r24, 0x73	; 115
    21ac:	71 f0       	breq	.+28     	; 0x21ca <vfprintf+0x12e>
    21ae:	83 35       	cpi	r24, 0x53	; 83
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <vfprintf+0x118>
    21b2:	59 c0       	rjmp	.+178    	; 0x2266 <vfprintf+0x1ca>
    21b4:	21 c0       	rjmp	.+66     	; 0x21f8 <vfprintf+0x15c>
    21b6:	f8 01       	movw	r30, r16
    21b8:	80 81       	ld	r24, Z
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	0e 5f       	subi	r16, 0xFE	; 254
    21be:	1f 4f       	sbci	r17, 0xFF	; 255
    21c0:	88 24       	eor	r8, r8
    21c2:	83 94       	inc	r8
    21c4:	91 2c       	mov	r9, r1
    21c6:	53 01       	movw	r10, r6
    21c8:	13 c0       	rjmp	.+38     	; 0x21f0 <vfprintf+0x154>
    21ca:	28 01       	movw	r4, r16
    21cc:	f2 e0       	ldi	r31, 0x02	; 2
    21ce:	4f 0e       	add	r4, r31
    21d0:	51 1c       	adc	r5, r1
    21d2:	f8 01       	movw	r30, r16
    21d4:	a0 80       	ld	r10, Z
    21d6:	b1 80       	ldd	r11, Z+1	; 0x01
    21d8:	36 fe       	sbrs	r3, 6
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <vfprintf+0x146>
    21dc:	69 2d       	mov	r22, r9
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <vfprintf+0x14a>
    21e2:	6f ef       	ldi	r22, 0xFF	; 255
    21e4:	7f ef       	ldi	r23, 0xFF	; 255
    21e6:	c5 01       	movw	r24, r10
    21e8:	0e 94 3a 12 	call	0x2474	; 0x2474 <strnlen>
    21ec:	4c 01       	movw	r8, r24
    21ee:	82 01       	movw	r16, r4
    21f0:	f3 2d       	mov	r31, r3
    21f2:	ff 77       	andi	r31, 0x7F	; 127
    21f4:	3f 2e       	mov	r3, r31
    21f6:	16 c0       	rjmp	.+44     	; 0x2224 <vfprintf+0x188>
    21f8:	28 01       	movw	r4, r16
    21fa:	22 e0       	ldi	r18, 0x02	; 2
    21fc:	42 0e       	add	r4, r18
    21fe:	51 1c       	adc	r5, r1
    2200:	f8 01       	movw	r30, r16
    2202:	a0 80       	ld	r10, Z
    2204:	b1 80       	ldd	r11, Z+1	; 0x01
    2206:	36 fe       	sbrs	r3, 6
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <vfprintf+0x174>
    220a:	69 2d       	mov	r22, r9
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <vfprintf+0x178>
    2210:	6f ef       	ldi	r22, 0xFF	; 255
    2212:	7f ef       	ldi	r23, 0xFF	; 255
    2214:	c5 01       	movw	r24, r10
    2216:	0e 94 2f 12 	call	0x245e	; 0x245e <strnlen_P>
    221a:	4c 01       	movw	r8, r24
    221c:	f3 2d       	mov	r31, r3
    221e:	f0 68       	ori	r31, 0x80	; 128
    2220:	3f 2e       	mov	r3, r31
    2222:	82 01       	movw	r16, r4
    2224:	33 fc       	sbrc	r3, 3
    2226:	1b c0       	rjmp	.+54     	; 0x225e <vfprintf+0x1c2>
    2228:	82 2d       	mov	r24, r2
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	88 16       	cp	r8, r24
    222e:	99 06       	cpc	r9, r25
    2230:	b0 f4       	brcc	.+44     	; 0x225e <vfprintf+0x1c2>
    2232:	b6 01       	movw	r22, r12
    2234:	80 e2       	ldi	r24, 0x20	; 32
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    223c:	2a 94       	dec	r2
    223e:	f4 cf       	rjmp	.-24     	; 0x2228 <vfprintf+0x18c>
    2240:	f5 01       	movw	r30, r10
    2242:	37 fc       	sbrc	r3, 7
    2244:	85 91       	lpm	r24, Z+
    2246:	37 fe       	sbrs	r3, 7
    2248:	81 91       	ld	r24, Z+
    224a:	5f 01       	movw	r10, r30
    224c:	b6 01       	movw	r22, r12
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    2254:	21 10       	cpse	r2, r1
    2256:	2a 94       	dec	r2
    2258:	21 e0       	ldi	r18, 0x01	; 1
    225a:	82 1a       	sub	r8, r18
    225c:	91 08       	sbc	r9, r1
    225e:	81 14       	cp	r8, r1
    2260:	91 04       	cpc	r9, r1
    2262:	71 f7       	brne	.-36     	; 0x2240 <vfprintf+0x1a4>
    2264:	e8 c0       	rjmp	.+464    	; 0x2436 <vfprintf+0x39a>
    2266:	84 36       	cpi	r24, 0x64	; 100
    2268:	11 f0       	breq	.+4      	; 0x226e <vfprintf+0x1d2>
    226a:	89 36       	cpi	r24, 0x69	; 105
    226c:	41 f5       	brne	.+80     	; 0x22be <vfprintf+0x222>
    226e:	f8 01       	movw	r30, r16
    2270:	37 fe       	sbrs	r3, 7
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <vfprintf+0x1e6>
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	0c 5f       	subi	r16, 0xFC	; 252
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <vfprintf+0x1f6>
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	07 2e       	mov	r0, r23
    2288:	00 0c       	add	r0, r0
    228a:	88 0b       	sbc	r24, r24
    228c:	99 0b       	sbc	r25, r25
    228e:	0e 5f       	subi	r16, 0xFE	; 254
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	f3 2d       	mov	r31, r3
    2294:	ff 76       	andi	r31, 0x6F	; 111
    2296:	3f 2e       	mov	r3, r31
    2298:	97 ff       	sbrs	r25, 7
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <vfprintf+0x212>
    229c:	90 95       	com	r25
    229e:	80 95       	com	r24
    22a0:	70 95       	com	r23
    22a2:	61 95       	neg	r22
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	8f 4f       	sbci	r24, 0xFF	; 255
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	f0 68       	ori	r31, 0x80	; 128
    22ac:	3f 2e       	mov	r3, r31
    22ae:	2a e0       	ldi	r18, 0x0A	; 10
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	a3 01       	movw	r20, r6
    22b4:	0e 94 81 12 	call	0x2502	; 0x2502 <__ultoa_invert>
    22b8:	88 2e       	mov	r8, r24
    22ba:	86 18       	sub	r8, r6
    22bc:	45 c0       	rjmp	.+138    	; 0x2348 <vfprintf+0x2ac>
    22be:	85 37       	cpi	r24, 0x75	; 117
    22c0:	31 f4       	brne	.+12     	; 0x22ce <vfprintf+0x232>
    22c2:	23 2d       	mov	r18, r3
    22c4:	2f 7e       	andi	r18, 0xEF	; 239
    22c6:	b2 2e       	mov	r11, r18
    22c8:	2a e0       	ldi	r18, 0x0A	; 10
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	25 c0       	rjmp	.+74     	; 0x2318 <vfprintf+0x27c>
    22ce:	93 2d       	mov	r25, r3
    22d0:	99 7f       	andi	r25, 0xF9	; 249
    22d2:	b9 2e       	mov	r11, r25
    22d4:	8f 36       	cpi	r24, 0x6F	; 111
    22d6:	c1 f0       	breq	.+48     	; 0x2308 <vfprintf+0x26c>
    22d8:	18 f4       	brcc	.+6      	; 0x22e0 <vfprintf+0x244>
    22da:	88 35       	cpi	r24, 0x58	; 88
    22dc:	79 f0       	breq	.+30     	; 0x22fc <vfprintf+0x260>
    22de:	b5 c0       	rjmp	.+362    	; 0x244a <vfprintf+0x3ae>
    22e0:	80 37       	cpi	r24, 0x70	; 112
    22e2:	19 f0       	breq	.+6      	; 0x22ea <vfprintf+0x24e>
    22e4:	88 37       	cpi	r24, 0x78	; 120
    22e6:	21 f0       	breq	.+8      	; 0x22f0 <vfprintf+0x254>
    22e8:	b0 c0       	rjmp	.+352    	; 0x244a <vfprintf+0x3ae>
    22ea:	e9 2f       	mov	r30, r25
    22ec:	e0 61       	ori	r30, 0x10	; 16
    22ee:	be 2e       	mov	r11, r30
    22f0:	b4 fe       	sbrs	r11, 4
    22f2:	0d c0       	rjmp	.+26     	; 0x230e <vfprintf+0x272>
    22f4:	fb 2d       	mov	r31, r11
    22f6:	f4 60       	ori	r31, 0x04	; 4
    22f8:	bf 2e       	mov	r11, r31
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <vfprintf+0x272>
    22fc:	34 fe       	sbrs	r3, 4
    22fe:	0a c0       	rjmp	.+20     	; 0x2314 <vfprintf+0x278>
    2300:	29 2f       	mov	r18, r25
    2302:	26 60       	ori	r18, 0x06	; 6
    2304:	b2 2e       	mov	r11, r18
    2306:	06 c0       	rjmp	.+12     	; 0x2314 <vfprintf+0x278>
    2308:	28 e0       	ldi	r18, 0x08	; 8
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <vfprintf+0x27c>
    230e:	20 e1       	ldi	r18, 0x10	; 16
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <vfprintf+0x27c>
    2314:	20 e1       	ldi	r18, 0x10	; 16
    2316:	32 e0       	ldi	r19, 0x02	; 2
    2318:	f8 01       	movw	r30, r16
    231a:	b7 fe       	sbrs	r11, 7
    231c:	07 c0       	rjmp	.+14     	; 0x232c <vfprintf+0x290>
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0c 5f       	subi	r16, 0xFC	; 252
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <vfprintf+0x29c>
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 5f       	subi	r16, 0xFE	; 254
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	a3 01       	movw	r20, r6
    233a:	0e 94 81 12 	call	0x2502	; 0x2502 <__ultoa_invert>
    233e:	88 2e       	mov	r8, r24
    2340:	86 18       	sub	r8, r6
    2342:	fb 2d       	mov	r31, r11
    2344:	ff 77       	andi	r31, 0x7F	; 127
    2346:	3f 2e       	mov	r3, r31
    2348:	36 fe       	sbrs	r3, 6
    234a:	0d c0       	rjmp	.+26     	; 0x2366 <vfprintf+0x2ca>
    234c:	23 2d       	mov	r18, r3
    234e:	2e 7f       	andi	r18, 0xFE	; 254
    2350:	a2 2e       	mov	r10, r18
    2352:	89 14       	cp	r8, r9
    2354:	58 f4       	brcc	.+22     	; 0x236c <vfprintf+0x2d0>
    2356:	34 fe       	sbrs	r3, 4
    2358:	0b c0       	rjmp	.+22     	; 0x2370 <vfprintf+0x2d4>
    235a:	32 fc       	sbrc	r3, 2
    235c:	09 c0       	rjmp	.+18     	; 0x2370 <vfprintf+0x2d4>
    235e:	83 2d       	mov	r24, r3
    2360:	8e 7e       	andi	r24, 0xEE	; 238
    2362:	a8 2e       	mov	r10, r24
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <vfprintf+0x2d4>
    2366:	b8 2c       	mov	r11, r8
    2368:	a3 2c       	mov	r10, r3
    236a:	03 c0       	rjmp	.+6      	; 0x2372 <vfprintf+0x2d6>
    236c:	b8 2c       	mov	r11, r8
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <vfprintf+0x2d6>
    2370:	b9 2c       	mov	r11, r9
    2372:	a4 fe       	sbrs	r10, 4
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <vfprintf+0x2f8>
    2376:	fe 01       	movw	r30, r28
    2378:	e8 0d       	add	r30, r8
    237a:	f1 1d       	adc	r31, r1
    237c:	80 81       	ld	r24, Z
    237e:	80 33       	cpi	r24, 0x30	; 48
    2380:	21 f4       	brne	.+8      	; 0x238a <vfprintf+0x2ee>
    2382:	9a 2d       	mov	r25, r10
    2384:	99 7e       	andi	r25, 0xE9	; 233
    2386:	a9 2e       	mov	r10, r25
    2388:	09 c0       	rjmp	.+18     	; 0x239c <vfprintf+0x300>
    238a:	a2 fe       	sbrs	r10, 2
    238c:	06 c0       	rjmp	.+12     	; 0x239a <vfprintf+0x2fe>
    238e:	b3 94       	inc	r11
    2390:	b3 94       	inc	r11
    2392:	04 c0       	rjmp	.+8      	; 0x239c <vfprintf+0x300>
    2394:	8a 2d       	mov	r24, r10
    2396:	86 78       	andi	r24, 0x86	; 134
    2398:	09 f0       	breq	.+2      	; 0x239c <vfprintf+0x300>
    239a:	b3 94       	inc	r11
    239c:	a3 fc       	sbrc	r10, 3
    239e:	11 c0       	rjmp	.+34     	; 0x23c2 <vfprintf+0x326>
    23a0:	a0 fe       	sbrs	r10, 0
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <vfprintf+0x314>
    23a4:	b2 14       	cp	r11, r2
    23a6:	88 f4       	brcc	.+34     	; 0x23ca <vfprintf+0x32e>
    23a8:	28 0c       	add	r2, r8
    23aa:	92 2c       	mov	r9, r2
    23ac:	9b 18       	sub	r9, r11
    23ae:	0e c0       	rjmp	.+28     	; 0x23cc <vfprintf+0x330>
    23b0:	b2 14       	cp	r11, r2
    23b2:	60 f4       	brcc	.+24     	; 0x23cc <vfprintf+0x330>
    23b4:	b6 01       	movw	r22, r12
    23b6:	80 e2       	ldi	r24, 0x20	; 32
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    23be:	b3 94       	inc	r11
    23c0:	f7 cf       	rjmp	.-18     	; 0x23b0 <vfprintf+0x314>
    23c2:	b2 14       	cp	r11, r2
    23c4:	18 f4       	brcc	.+6      	; 0x23cc <vfprintf+0x330>
    23c6:	2b 18       	sub	r2, r11
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <vfprintf+0x332>
    23ca:	98 2c       	mov	r9, r8
    23cc:	21 2c       	mov	r2, r1
    23ce:	a4 fe       	sbrs	r10, 4
    23d0:	10 c0       	rjmp	.+32     	; 0x23f2 <vfprintf+0x356>
    23d2:	b6 01       	movw	r22, r12
    23d4:	80 e3       	ldi	r24, 0x30	; 48
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    23dc:	a2 fe       	sbrs	r10, 2
    23de:	17 c0       	rjmp	.+46     	; 0x240e <vfprintf+0x372>
    23e0:	a1 fc       	sbrc	r10, 1
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <vfprintf+0x34e>
    23e4:	88 e7       	ldi	r24, 0x78	; 120
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <vfprintf+0x352>
    23ea:	88 e5       	ldi	r24, 0x58	; 88
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	b6 01       	movw	r22, r12
    23f0:	0c c0       	rjmp	.+24     	; 0x240a <vfprintf+0x36e>
    23f2:	8a 2d       	mov	r24, r10
    23f4:	86 78       	andi	r24, 0x86	; 134
    23f6:	59 f0       	breq	.+22     	; 0x240e <vfprintf+0x372>
    23f8:	a1 fe       	sbrs	r10, 1
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <vfprintf+0x364>
    23fc:	8b e2       	ldi	r24, 0x2B	; 43
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <vfprintf+0x366>
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	a7 fc       	sbrc	r10, 7
    2404:	8d e2       	ldi	r24, 0x2D	; 45
    2406:	b6 01       	movw	r22, r12
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    240e:	89 14       	cp	r8, r9
    2410:	38 f4       	brcc	.+14     	; 0x2420 <vfprintf+0x384>
    2412:	b6 01       	movw	r22, r12
    2414:	80 e3       	ldi	r24, 0x30	; 48
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    241c:	9a 94       	dec	r9
    241e:	f7 cf       	rjmp	.-18     	; 0x240e <vfprintf+0x372>
    2420:	8a 94       	dec	r8
    2422:	f3 01       	movw	r30, r6
    2424:	e8 0d       	add	r30, r8
    2426:	f1 1d       	adc	r31, r1
    2428:	80 81       	ld	r24, Z
    242a:	b6 01       	movw	r22, r12
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    2432:	81 10       	cpse	r8, r1
    2434:	f5 cf       	rjmp	.-22     	; 0x2420 <vfprintf+0x384>
    2436:	22 20       	and	r2, r2
    2438:	09 f4       	brne	.+2      	; 0x243c <vfprintf+0x3a0>
    243a:	42 ce       	rjmp	.-892    	; 0x20c0 <vfprintf+0x24>
    243c:	b6 01       	movw	r22, r12
    243e:	80 e2       	ldi	r24, 0x20	; 32
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 45 12 	call	0x248a	; 0x248a <fputc>
    2446:	2a 94       	dec	r2
    2448:	f6 cf       	rjmp	.-20     	; 0x2436 <vfprintf+0x39a>
    244a:	f6 01       	movw	r30, r12
    244c:	86 81       	ldd	r24, Z+6	; 0x06
    244e:	97 81       	ldd	r25, Z+7	; 0x07
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x3ba>
    2452:	8f ef       	ldi	r24, 0xFF	; 255
    2454:	9f ef       	ldi	r25, 0xFF	; 255
    2456:	2b 96       	adiw	r28, 0x0b	; 11
    2458:	e2 e1       	ldi	r30, 0x12	; 18
    245a:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__>

0000245e <strnlen_P>:
    245e:	fc 01       	movw	r30, r24
    2460:	05 90       	lpm	r0, Z+
    2462:	61 50       	subi	r22, 0x01	; 1
    2464:	70 40       	sbci	r23, 0x00	; 0
    2466:	01 10       	cpse	r0, r1
    2468:	d8 f7       	brcc	.-10     	; 0x2460 <strnlen_P+0x2>
    246a:	80 95       	com	r24
    246c:	90 95       	com	r25
    246e:	8e 0f       	add	r24, r30
    2470:	9f 1f       	adc	r25, r31
    2472:	08 95       	ret

00002474 <strnlen>:
    2474:	fc 01       	movw	r30, r24
    2476:	61 50       	subi	r22, 0x01	; 1
    2478:	70 40       	sbci	r23, 0x00	; 0
    247a:	01 90       	ld	r0, Z+
    247c:	01 10       	cpse	r0, r1
    247e:	d8 f7       	brcc	.-10     	; 0x2476 <strnlen+0x2>
    2480:	80 95       	com	r24
    2482:	90 95       	com	r25
    2484:	8e 0f       	add	r24, r30
    2486:	9f 1f       	adc	r25, r31
    2488:	08 95       	ret

0000248a <fputc>:
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	fb 01       	movw	r30, r22
    2494:	23 81       	ldd	r18, Z+3	; 0x03
    2496:	21 fd       	sbrc	r18, 1
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <fputc+0x16>
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	9f ef       	ldi	r25, 0xFF	; 255
    249e:	2c c0       	rjmp	.+88     	; 0x24f8 <fputc+0x6e>
    24a0:	22 ff       	sbrs	r18, 2
    24a2:	16 c0       	rjmp	.+44     	; 0x24d0 <fputc+0x46>
    24a4:	46 81       	ldd	r20, Z+6	; 0x06
    24a6:	57 81       	ldd	r21, Z+7	; 0x07
    24a8:	24 81       	ldd	r18, Z+4	; 0x04
    24aa:	35 81       	ldd	r19, Z+5	; 0x05
    24ac:	42 17       	cp	r20, r18
    24ae:	53 07       	cpc	r21, r19
    24b0:	44 f4       	brge	.+16     	; 0x24c2 <fputc+0x38>
    24b2:	a0 81       	ld	r26, Z
    24b4:	b1 81       	ldd	r27, Z+1	; 0x01
    24b6:	9d 01       	movw	r18, r26
    24b8:	2f 5f       	subi	r18, 0xFF	; 255
    24ba:	3f 4f       	sbci	r19, 0xFF	; 255
    24bc:	31 83       	std	Z+1, r19	; 0x01
    24be:	20 83       	st	Z, r18
    24c0:	8c 93       	st	X, r24
    24c2:	26 81       	ldd	r18, Z+6	; 0x06
    24c4:	37 81       	ldd	r19, Z+7	; 0x07
    24c6:	2f 5f       	subi	r18, 0xFF	; 255
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	37 83       	std	Z+7, r19	; 0x07
    24cc:	26 83       	std	Z+6, r18	; 0x06
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <fputc+0x6e>
    24d0:	8b 01       	movw	r16, r22
    24d2:	ec 01       	movw	r28, r24
    24d4:	fb 01       	movw	r30, r22
    24d6:	00 84       	ldd	r0, Z+8	; 0x08
    24d8:	f1 85       	ldd	r31, Z+9	; 0x09
    24da:	e0 2d       	mov	r30, r0
    24dc:	09 95       	icall
    24de:	89 2b       	or	r24, r25
    24e0:	e1 f6       	brne	.-72     	; 0x249a <fputc+0x10>
    24e2:	d8 01       	movw	r26, r16
    24e4:	16 96       	adiw	r26, 0x06	; 6
    24e6:	8d 91       	ld	r24, X+
    24e8:	9c 91       	ld	r25, X
    24ea:	17 97       	sbiw	r26, 0x07	; 7
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	17 96       	adiw	r26, 0x07	; 7
    24f0:	9c 93       	st	X, r25
    24f2:	8e 93       	st	-X, r24
    24f4:	16 97       	sbiw	r26, 0x06	; 6
    24f6:	ce 01       	movw	r24, r28
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <__ultoa_invert>:
    2502:	fa 01       	movw	r30, r20
    2504:	aa 27       	eor	r26, r26
    2506:	28 30       	cpi	r18, 0x08	; 8
    2508:	51 f1       	breq	.+84     	; 0x255e <__ultoa_invert+0x5c>
    250a:	20 31       	cpi	r18, 0x10	; 16
    250c:	81 f1       	breq	.+96     	; 0x256e <__ultoa_invert+0x6c>
    250e:	e8 94       	clt
    2510:	6f 93       	push	r22
    2512:	6e 7f       	andi	r22, 0xFE	; 254
    2514:	6e 5f       	subi	r22, 0xFE	; 254
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	8f 4f       	sbci	r24, 0xFF	; 255
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	af 4f       	sbci	r26, 0xFF	; 255
    251e:	b1 e0       	ldi	r27, 0x01	; 1
    2520:	3e d0       	rcall	.+124    	; 0x259e <__ultoa_invert+0x9c>
    2522:	b4 e0       	ldi	r27, 0x04	; 4
    2524:	3c d0       	rcall	.+120    	; 0x259e <__ultoa_invert+0x9c>
    2526:	67 0f       	add	r22, r23
    2528:	78 1f       	adc	r23, r24
    252a:	89 1f       	adc	r24, r25
    252c:	9a 1f       	adc	r25, r26
    252e:	a1 1d       	adc	r26, r1
    2530:	68 0f       	add	r22, r24
    2532:	79 1f       	adc	r23, r25
    2534:	8a 1f       	adc	r24, r26
    2536:	91 1d       	adc	r25, r1
    2538:	a1 1d       	adc	r26, r1
    253a:	6a 0f       	add	r22, r26
    253c:	71 1d       	adc	r23, r1
    253e:	81 1d       	adc	r24, r1
    2540:	91 1d       	adc	r25, r1
    2542:	a1 1d       	adc	r26, r1
    2544:	20 d0       	rcall	.+64     	; 0x2586 <__ultoa_invert+0x84>
    2546:	09 f4       	brne	.+2      	; 0x254a <__ultoa_invert+0x48>
    2548:	68 94       	set
    254a:	3f 91       	pop	r19
    254c:	2a e0       	ldi	r18, 0x0A	; 10
    254e:	26 9f       	mul	r18, r22
    2550:	11 24       	eor	r1, r1
    2552:	30 19       	sub	r19, r0
    2554:	30 5d       	subi	r19, 0xD0	; 208
    2556:	31 93       	st	Z+, r19
    2558:	de f6       	brtc	.-74     	; 0x2510 <__ultoa_invert+0xe>
    255a:	cf 01       	movw	r24, r30
    255c:	08 95       	ret
    255e:	46 2f       	mov	r20, r22
    2560:	47 70       	andi	r20, 0x07	; 7
    2562:	40 5d       	subi	r20, 0xD0	; 208
    2564:	41 93       	st	Z+, r20
    2566:	b3 e0       	ldi	r27, 0x03	; 3
    2568:	0f d0       	rcall	.+30     	; 0x2588 <__ultoa_invert+0x86>
    256a:	c9 f7       	brne	.-14     	; 0x255e <__ultoa_invert+0x5c>
    256c:	f6 cf       	rjmp	.-20     	; 0x255a <__ultoa_invert+0x58>
    256e:	46 2f       	mov	r20, r22
    2570:	4f 70       	andi	r20, 0x0F	; 15
    2572:	40 5d       	subi	r20, 0xD0	; 208
    2574:	4a 33       	cpi	r20, 0x3A	; 58
    2576:	18 f0       	brcs	.+6      	; 0x257e <__ultoa_invert+0x7c>
    2578:	49 5d       	subi	r20, 0xD9	; 217
    257a:	31 fd       	sbrc	r19, 1
    257c:	40 52       	subi	r20, 0x20	; 32
    257e:	41 93       	st	Z+, r20
    2580:	02 d0       	rcall	.+4      	; 0x2586 <__ultoa_invert+0x84>
    2582:	a9 f7       	brne	.-22     	; 0x256e <__ultoa_invert+0x6c>
    2584:	ea cf       	rjmp	.-44     	; 0x255a <__ultoa_invert+0x58>
    2586:	b4 e0       	ldi	r27, 0x04	; 4
    2588:	a6 95       	lsr	r26
    258a:	97 95       	ror	r25
    258c:	87 95       	ror	r24
    258e:	77 95       	ror	r23
    2590:	67 95       	ror	r22
    2592:	ba 95       	dec	r27
    2594:	c9 f7       	brne	.-14     	; 0x2588 <__ultoa_invert+0x86>
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	61 05       	cpc	r22, r1
    259a:	71 05       	cpc	r23, r1
    259c:	08 95       	ret
    259e:	9b 01       	movw	r18, r22
    25a0:	ac 01       	movw	r20, r24
    25a2:	0a 2e       	mov	r0, r26
    25a4:	06 94       	lsr	r0
    25a6:	57 95       	ror	r21
    25a8:	47 95       	ror	r20
    25aa:	37 95       	ror	r19
    25ac:	27 95       	ror	r18
    25ae:	ba 95       	dec	r27
    25b0:	c9 f7       	brne	.-14     	; 0x25a4 <__ultoa_invert+0xa2>
    25b2:	62 0f       	add	r22, r18
    25b4:	73 1f       	adc	r23, r19
    25b6:	84 1f       	adc	r24, r20
    25b8:	95 1f       	adc	r25, r21
    25ba:	a0 1d       	adc	r26, r0
    25bc:	08 95       	ret

000025be <__prologue_saves__>:
    25be:	2f 92       	push	r2
    25c0:	3f 92       	push	r3
    25c2:	4f 92       	push	r4
    25c4:	5f 92       	push	r5
    25c6:	6f 92       	push	r6
    25c8:	7f 92       	push	r7
    25ca:	8f 92       	push	r8
    25cc:	9f 92       	push	r9
    25ce:	af 92       	push	r10
    25d0:	bf 92       	push	r11
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	ca 1b       	sub	r28, r26
    25e8:	db 0b       	sbc	r29, r27
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	09 94       	ijmp

000025f6 <__epilogue_restores__>:
    25f6:	2a 88       	ldd	r2, Y+18	; 0x12
    25f8:	39 88       	ldd	r3, Y+17	; 0x11
    25fa:	48 88       	ldd	r4, Y+16	; 0x10
    25fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2600:	7d 84       	ldd	r7, Y+13	; 0x0d
    2602:	8c 84       	ldd	r8, Y+12	; 0x0c
    2604:	9b 84       	ldd	r9, Y+11	; 0x0b
    2606:	aa 84       	ldd	r10, Y+10	; 0x0a
    2608:	b9 84       	ldd	r11, Y+9	; 0x09
    260a:	c8 84       	ldd	r12, Y+8	; 0x08
    260c:	df 80       	ldd	r13, Y+7	; 0x07
    260e:	ee 80       	ldd	r14, Y+6	; 0x06
    2610:	fd 80       	ldd	r15, Y+5	; 0x05
    2612:	0c 81       	ldd	r16, Y+4	; 0x04
    2614:	1b 81       	ldd	r17, Y+3	; 0x03
    2616:	aa 81       	ldd	r26, Y+2	; 0x02
    2618:	b9 81       	ldd	r27, Y+1	; 0x01
    261a:	ce 0f       	add	r28, r30
    261c:	d1 1d       	adc	r29, r1
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	ed 01       	movw	r28, r26
    262a:	08 95       	ret

0000262c <_exit>:
    262c:	f8 94       	cli

0000262e <__stop_program>:
    262e:	ff cf       	rjmp	.-2      	; 0x262e <__stop_program>
